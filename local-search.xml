<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java中的多态</title>
    <link href="/2022/08/19/java%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81/"/>
    <url>/2022/08/19/java%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<p>同一操作作用于不同的对象，可以有不同的解释，产生不同的结果。</p><p>java中的多态是一种运行期的状态。满足三个条件：</p><ul><li>有类继承或者接口实现</li><li>子类要重写父类的方法</li><li>父类的引用指向子类的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span></span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>&#123;<br>        sout(<span class="hljs-string">&quot;im Parent&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span></span>&#123;<span class="hljs-comment">// 1.有类继承或者接口实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">// 2.子类要重写父类的方法</span><br>        sout(<span class="hljs-string">&quot;im Son&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Daughter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span></span>&#123;<span class="hljs-comment">// 1.有类继承或者接口实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">// 2.子类要重写父类的方法</span><br>        sout(<span class="hljs-string">&quot;im Daughter&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Parent p = <span class="hljs-keyword">new</span> Son(); <span class="hljs-comment">//3.父类的引用指向子类的对象</span><br>        Parent p1 = <span class="hljs-keyword">new</span> Daughter(); <span class="hljs-comment">//3.父类的引用指向子类的对象</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样，就实现了多态，同样是Parent类的实例，p.call 调用的是Son类的实现、p1.call调用的是Daughter的实现。</p><p>有人说，你自己定义的时候不就已经知道p是son，p1是Daughter了么。但是，有些时候你用到的对象并不都是自己声明的。</p><p>比如Spring 中的IOC出来的对象，你在使用的时候就不知道他是谁，或者说你可以不用关心他是谁。根据具体情况而定。</p><blockquote><p>IOC，是Ioc—Inversion of Control 的缩写，中文翻译成“控制反转”，它是一种设计思想，意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p><p>换句话说当我们使用Spring框架的时候，对象是Spring容器创建出来并由容器进行管理，我们只需要使用就行了。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/09/01/OP-TEE%E4%B8%ADTA%E4%B8%8ECA%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3-------%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%AF%87/"/>
    <url>/2021/09/01/OP-TEE%E4%B8%ADTA%E4%B8%8ECA%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3-------%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="OP-TEE中TA与CA执行流程详解——-软件架构篇"><a href="#OP-TEE中TA与CA执行流程详解——-软件架构篇" class="headerlink" title="OP-TEE中TA与CA执行流程详解——-软件架构篇"></a>OP-TEE中TA与CA执行流程详解——-软件架构篇</h1><p>要使用OP-TEE来实现特定的安全功能就需要开发者根据自己的实际需求开发特定的CA和TA程序，并将TA集成到OP-TEE中。CA端负责实现在RTOS端userspace层面的对外接口，而TA端的代码则是在OP-TEE OS的userspace层面负责实现具体的安全功能，例如使用何种算法组合来对数据进行安全处理，对处理后的数据的安全保存，解密加密数据等等功能。接下来的章节将详细介绍CA到TA之间的所有流程以及相关结构体设置，接口调用等等，关于如何在OP-TEE中添加自有的TA和CA程序请参考文档《2. OP-TEE中添加自己的TA和CA》。关于OP-TEE的中断处理的流程请查阅《OP-TEE中的中断处理》相关文章，接下来的章节将介绍不考虑中断的情况下，一个完整的TA和CA之间进行调用的完整过程分析。下图为系统中CA与TA之间执行的软件框图。<br><img src="https://img-blog.csdn.net/20170605181857665?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2h1YWlmZW5neXVu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/27/3%20Modern%20Trusted%20Computing%20Hardware/"/>
    <url>/2021/08/27/3%20Modern%20Trusted%20Computing%20Hardware/</url>
    
    <content type="html"><![CDATA[<h1 id="3-Modern-Trusted-Computing-Hardware"><a href="#3-Modern-Trusted-Computing-Hardware" class="headerlink" title="3 Modern Trusted Computing Hardware"></a><strong>3 Modern Trusted Computing Hardware</strong></h1><p>本章介绍了ARM TrustZone的背景及其缺点。</p><h2 id="3-1-ARM-TrustZone"><a href="#3-1-ARM-TrustZone" class="headerlink" title="3.1 ARM TrustZone"></a>3.1 <strong>ARM TrustZone</strong></h2><p>ARM TrustZone 是 ARM 对可信计算的硬件支持。它是在许多最新的 ARM 处理器（包括 Cortex A8、Cortex A9 和 Cortex A15）中发现的一组安全扩展。 ARM TrustZone 提供两个由硬件访问控制支持的虚拟处理器。分别为secure world(SW)和normal world (NW)，根据单个 ARM SoC 的具体情况，单个资源可以在两个世界之间进行强分区，可以跨世界共享，或仅分配给单个世界。</p><h3 id="Secure-monitor"><a href="#Secure-monitor" class="headerlink" title="Secure monitor."></a><strong>Secure monitor.</strong></h3><p>安全监视器是一种 ARM 处理器模式，旨在在安全和正常世界之间切换</p><h3 id="Secure-world-entry-exit"><a href="#Secure-world-entry-exit" class="headerlink" title="Secure world entry/exit."></a><strong>Secure world entry/exit.</strong></h3><p>根据设计，ARM 平台总是首先进入安全世界。 在这里，系统固件可以在任何不受信任的代码（例如操作系统）有机会运行之前提供安全世界的运行时环境。</p><h3 id="Curtained-memory"><a href="#Curtained-memory" class="headerlink" title="Curtained memory"></a><strong>Curtained memory</strong></h3><p>在启动时，在安全监视器中运行的软件可以仅将一系列物理地址分配给安全世界，从而创建窗帘内存的抽象——系统其余部分无法访问内存。</p><h2 id="3-2-Shortcomings-of-ARM-TrustZone"><a href="#3-2-Shortcomings-of-ARM-TrustZone" class="headerlink" title="3.2 Shortcomings of ARM TrustZone"></a><strong>3.2 Shortcomings of ARM TrustZone</strong></h2><p>尽管 ARM TrustZone 规范描述了在安全世界中如何保护处理器和内存子系统，该规范没有说明应该如何保护大多数其他资源。 这导致了碎片化——SoC 为 TrustZone 提供了各种形式的不同硬件资源保护，或者根本没有保护。</p><h3 id="Storage-（No-trusted-storage）"><a href="#Storage-（No-trusted-storage）" class="headerlink" title="*Storage.*（No trusted storage）"></a>*Storage.*（No trusted storage）</h3><p>令人惊讶的是，ARM TrustZone 规范没有提供有关如何为 TrustZone 实施安全存储的指南。 缺乏安全存储大大降低了 TrustZone 作为可信计算硬件的有效性。</p><h3 id="Crypto-needs-（No-trusted-storage）"><a href="#Crypto-needs-（No-trusted-storage）" class="headerlink" title="**Crypto needs.**（No trusted storage）"></a>**Crypto needs.**（No trusted storage）</h3><p>大多数受信任的系统都使用密码学。 然而，该规范并未提及提供安全的熵源或单调递增的计数器。</p><h3 id="Lack-of-virtualization"><a href="#Lack-of-virtualization" class="headerlink" title="Lack of virtualization."></a><strong>Lack of virtualization.</strong></h3><p>当今移动设备中使用的大多数基于 ARM 的 SoC 都缺乏虚拟化支持。 在缺乏虚拟化硬件辅助的 ARM 平台上虚拟化商用操作系统（例如 Windows）非常困难。</p><h3 id="Lack-of-secure-clock-and-other-peripherals"><a href="#Lack-of-secure-clock-and-other-peripherals" class="headerlink" title="Lack of secure clock (and other peripherals)."></a><strong>Lack of secure clock (and other peripherals).</strong></h3><p>系统通常需要一个安全时钟。 虽然 TrustZone<br>访问受保护的内存和中断是向提供安全外设迈出的一步，但如果不保护可以与这些外设通信的总线控制器，通常是不够的。</p><h3 id="Lack-of-access"><a href="#Lack-of-access" class="headerlink" title="Lack of access"></a><strong>Lack of access</strong></h3><p>大多数 SoC 硬件供应商不提供对其固件的访问。 因此，许多开发人员和研究人员无法找到将他们的系统或原型部署到 TrustZone 的方法。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/08/20/TZ%E5%AD%A6%E4%B9%A0%E7%BB%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%932021.8.9-2021.8.20/"/>
    <url>/2021/08/20/TZ%E5%AD%A6%E4%B9%A0%E7%BB%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%932021.8.9-2021.8.20/</url>
    
    <content type="html"><![CDATA[<h1 id="TZ学习组学习总结2021-8-9-2021-8-20"><a href="#TZ学习组学习总结2021-8-9-2021-8-20" class="headerlink" title="TZ学习组学习总结2021.8.9-2021.8.20"></a>TZ学习组学习总结2021.8.9-2021.8.20</h1><p>姓名：胡晨    </p><h2 id="一、-本段时间的学习内容："><a href="#一、-本段时间的学习内容：" class="headerlink" title="一、 本段时间的学习内容："></a>一、 本段时间的学习内容：</h2><h3 id="A-学习的详细内容1：成功搭建optee环境。"><a href="#A-学习的详细内容1：成功搭建optee环境。" class="headerlink" title="A. 学习的详细内容1：成功搭建optee环境。"></a>A. 学习的详细内容1：成功搭建optee环境。</h3><p>学习成果1：进度安排（各工作是否达到预期等）：达到。</p><h3 id="B-学习的内容2：实践TA-CA的简单套路，了解了执行的流程，看了一些相关的视频（https-www-bilibili-com-video-BV1L4411N7gZ-p-1）和博客（https-icyshuai-blog-csdn-net-article-details-73716352）"><a href="#B-学习的内容2：实践TA-CA的简单套路，了解了执行的流程，看了一些相关的视频（https-www-bilibili-com-video-BV1L4411N7gZ-p-1）和博客（https-icyshuai-blog-csdn-net-article-details-73716352）" class="headerlink" title="B.学习的内容2：实践TA,CA的简单套路，了解了执行的流程，看了一些相关的视频（https://www.bilibili.com/video/BV1L4411N7gZ?p=1）和博客（https://icyshuai.blog.csdn.net/article/details/73716352）"></a>B.学习的内容2：实践TA,CA的简单套路，了解了执行的流程，看了一些相关的视频（<a href="https://www.bilibili.com/video/BV1L4411N7gZ?p=1%EF%BC%89%E5%92%8C%E5%8D%9A%E5%AE%A2%EF%BC%88https://icyshuai.blog.csdn.net/article/details/73716352%EF%BC%89">https://www.bilibili.com/video/BV1L4411N7gZ?p=1）和博客（https://icyshuai.blog.csdn.net/article/details/73716352）</a></h3><p>学习成果2：进度安排（各工作是否达到预期等）：达到。</p><h2 id="二、困难和解决方案："><a href="#二、困难和解决方案：" class="headerlink" title="二、困难和解决方案："></a>二、困难和解决方案：</h2><p>以下给出我总结的 optee 环境搭建方法（经过多次尝试，该方法可将时间缩短到两小时内，且必成功）：</p><p>1.首先，unbuntu选择18.04版本，这是一切的基础，想必大家都知道版本的重要。（其他版本可能或多或少有难以解决的问题）。给出下载网址：<a href="http://mirrors.163.com/ubuntu-releases/18.04/">http://mirrors.163.com/ubuntu-releases/18.04/</a></p><p>2.使用如下指令安装搭建时需要的工具和库（此时使用Ubuntu18.04不会有任何报错，但是其他版本会有包安装不了，从而会导致后面一些莫名其妙的错误。）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install android-tools-adb android-tools-fastboot autoconf \<br><span class="hljs-attribute">automake</span> bc bison build-essential cscope curl device-tree-compiler \<br><span class="hljs-attribute">expect</span> flex ftp-upload gdisk iasl libattr<span class="hljs-number">1</span>-dev libc<span class="hljs-number">6</span>:i<span class="hljs-number">386</span> libcap-dev \<br><span class="hljs-attribute">libfdt</span>-dev libftdi-dev libglib<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-dev libhidapi-dev libncurses<span class="hljs-number">5</span>-dev \<br><span class="hljs-attribute">libpixman</span>-<span class="hljs-number">1</span>-dev libssl-dev libstdc++<span class="hljs-number">6</span>:i<span class="hljs-number">386</span> libtool libz<span class="hljs-number">1</span>:i<span class="hljs-number">386</span> make \<br><span class="hljs-attribute">mtools</span> netcat python-crypto python-serial python-wand unzip uuid-dev \<br><span class="hljs-attribute">xdg</span>-utils xterm xz-utils zlib<span class="hljs-number">1</span>g-dev<br></code></pre></td></tr></table></figure><p>3.下载OP-TEE的源代码</p><p>此时直接从网盘中下载就可以了，千万不要自己同步，可能出现python版本不对等问题网盘链接如下：</p><p><a href="https://pan.baidu.com/s/1T9tsOnQ3Ebz9wm7ibzBLpw">https://pan.baidu.com/s/1T9tsOnQ3Ebz9wm7ibzBLpw</a></p><p>提取码: cd94</p><p>把压缩包复制到ubuntu中再解压就可以了（解压出来的文件层数过多，例如 /op-tee/OP-TEE/…. ,可以只留一个大文件目录方便操作）</p><p>5.获取toolchain</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> build<br><span class="hljs-variable">$</span> make <span class="hljs-operator">-f</span> qemu.mk all<br></code></pre></td></tr></table></figure><p>6.启动qemu（仍然在build目录下）</p><p>如果你不信邪，直接执行下面命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">make</span> -<span class="hljs-keyword">f</span> qemu.<span class="hljs-keyword">mk</span> run-<span class="hljs-keyword">only</span><br></code></pre></td></tr></table></figure><p>此时必然会出现一个问题：</p><p>*** [/home/rhj0/open-tee/qemu/rules.mak:69：util/memfd.o] 错误 1</p><p>此时就需要修改文件里的代码。（可以直接在文件里搜索关键代码，方便寻找）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> qemu<span class="hljs-regexp">/util/m</span>emfd.c文件中的： <br><span class="hljs-comment">#ifdef CONFIG_MEMFD </span><br><span class="hljs-comment">#include &lt;sys/memfd.h&gt; </span><br><span class="hljs-comment">#elif defined CONFIG_LINUX </span><br><span class="hljs-regexp">//</span> 改为： <span class="hljs-comment">#if defined CONFIG_LINUX &amp;&amp; !defined CONFIG_MEMFD </span><br><br><span class="hljs-regexp">//</span> qemu/configure文件中的： <br><span class="hljs-comment">#include &lt;sys/memfd.h&gt; </span><br><span class="hljs-regexp">//</span> 改为： <span class="hljs-comment">#include &lt;sys/mman.h&gt;</span><br></code></pre></td></tr></table></figure><p>附上官方的更改链接（更改和上面一样）：<a href="https://git.qemu.org/?p=qemu.git;a=commitdiff;h=75e5b70e6b5dcc4f2219992d7cffa462aa406af0;hp=200780a3a3ed067dfb2e0d2210b0ed09e748ba26">https://git.qemu.org/?p=qemu.git;a=commitdiff;h=75e5b70e6b5dcc4f2219992d7cffa462aa406af0;hp=200780a3a3ed067dfb2e0d2210b0ed09e748ba26</a></p><p>再次执行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">make</span> -<span class="hljs-keyword">f</span> qemu.<span class="hljs-keyword">mk</span> run-<span class="hljs-keyword">only</span><br></code></pre></td></tr></table></figure><p>就大功告成了。总耗时应该不超过两个小时，甚至网速快的话十几分钟就可以了。</p><p>（以上全是踩坑踩出来的经验和各个评论区大佬的解决方案，本人只是汇总找了条最简单的路）</p><p>对比别的教程把下载和同步源码改成了网盘下载，大大减少了不必要的麻烦。</p><p>最后感谢：<a href="https://www.bilibili.com/video/BV1L4411N7gZ?from=search&amp;seid=3256181449257213811%EF%BC%88**%E6%8E%A8%E8%8D%90%E8%A7%82%E7%9C%8B**%EF%BC%89">https://www.bilibili.com/video/BV1L4411N7gZ?from=search&amp;seid=3256181449257213811（**推荐观看**）</a></p><p>和<a href="https://icyshuai.blog.csdn.net/article/details/71499619">https://icyshuai.blog.csdn.net/article/details/71499619</a></p><p>三、 下周预期安排</p><ol><li>下期进度安排：</li></ol><p>尽快熟悉TA和CA的用法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>const</title>
    <link href="/2021/03/11/c%E7%9A%84const/"/>
    <url>/2021/03/11/c%E7%9A%84const/</url>
    
    <content type="html"><![CDATA[<p>const 修饰的数据类型是指常类型，常类型的变量或对象的对象的值是不能被更新的。</p><p>const 推出的初始目的，正是为了取代预编译指令，消除他的缺点，同时继承它的优点。</p><h5 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h5><ol><li>可以定义const常量，具有不可变性。例如：const int max = 100；max++会产生错误。</li><li>便于进行类型检查，是编译器对处理内容有更多了解，消除了一些隐患。例如：void f（const int i）{…….}编译器就会知道i是一个常量，不允许修改；</li><li>可以避免意义模糊的数字出现，同样可以很方便的进行参数的调整和修改。同宏定义一样。</li><li>可以保护被修饰的东西，防止意外的修改，增强程序的健壮性。</li><li>可以节省空间，避免不必要的内存分配。如：</li></ol><p>#define PI 3.14159 //常量宏  　　</p><p>const double <a href="https://baike.baidu.com/item/Pi">Pi</a>=3.14159; //此时并未将Pi放入ROM中 ……  　　</p><p>double i=Pi; //此时为Pi分配内存，以后不再分配！  　　</p><p>double I=PI; //编译期间进行宏替换，分配内存　</p><p>double j=Pi; //没有内存分配  　　</p><p>double J=PI; //再进行宏替换，又一次分配内存！ </p><p>const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是像#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define定义的常量在内存中有若干份拷贝。</p><h5 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h5><p>例：为什么下面的例子在使用一个const变量来初始化数组，ANSI C编译器会报告一个错误呢？</p><p>const int n = 5；</p><p>int a[n];</p><p> 答案与分析：</p><p>1）这个问题讨论的是“常量与“只读变量”的区别。常量，例如5， “abc”，等，肯定是只读的，因为常量是被编译器放在内存中的只读区域，当然也就不能够去修改它。而“只读变量”则是在内存中开辟一个地方来存放它的值，只不过这个值由编译器限定不允许被修改。C语言关键字const就是用来限定一个变量不允许被改变的修饰符（Qualifier）。上述代码中变量n被修饰为只读变量，可惜再怎么修饰也不是常量。而ANSI C规定数组定义时长度必须是“常量” C99标准，数组下标可以用变量来表示），“只读变量”也是不可以的，“常量”不等于“不可变的变量”。但是在C++中，局部数组是可以使用变量作为其长度的。</p><p>2）但是在标准C++中，这样定义的是一个常量，这种写法是对的。实际上，根据编译过程及内存分配ANSI C对数组的规定限制了它（实际上用GCC或VS2005编译以上代码，确实没有错误产生，也没有给出警告）。</p><p>3）那么，在ANSI C中用什么来定义常量呢？答案是enum类型和#define宏，这两个都可以用来定义常量。</p><p>。。。。。</p><p>const 的用法还有很多，今天就先写到这里。</p><p>有需要再添加吧。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>纵向联邦学习</title>
    <link href="/2021/03/07/%E7%BA%B5%E5%90%91%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/03/07/%E7%BA%B5%E5%90%91%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="纵向联邦学习的定义与举例"><a href="#纵向联邦学习的定义与举例" class="headerlink" title="纵向联邦学习的定义与举例"></a>纵向联邦学习的定义与举例</h4><p>我们把在数据集上具有相同的样本空间、不同的特征空间的参与方所组成的联邦学习归类为纵向联邦学习（VFL）。</p><p>假如有一位用户在一家银行中有一些能够反映出该用户的经济收入、消费习惯和信用评级的数据记录。同时在一家电商平台中记录着这位用户所浏览和购买的商品的历史信息。尽管这两家公司拥有用户数据的特征空间完全不同，他们彼此间却有着紧密的联系。例如，用户的购买历史可能在某种程度上决定了该用户的信用评级。</p><p>出于不同的商业目的，不同的组织拥有的数据通常具有不同的特征空间，但这些组织可能共享一个巨大的用户群体。通过使用VFL，我们可以利用分布于这些组织的异构数据，搭建更好的机器学习模型，并且不需要交换和泄露隐私数据。</p><h4 id="纵向联邦学习的架构"><a href="#纵向联邦学习的架构" class="headerlink" title="纵向联邦学习的架构"></a>纵向联邦学习的架构</h4><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20210309235515471.png" alt="image-20210309235515471"></p><p>举个例子。假设两家公司A和B想要协同地训练一个机器学习模型。每一家公司拥有各自的数据，此外B还拥有进行模型预测任务所需的标注数据。由于用户隐私和数据安全的原因，A方和B 方不能直接交换数据。为了保证训练过程中的数据保密性，加入了一个第三方协调者C。在这里，我们假设C方是诚实且不与A方和B方共谋，但A方和B方都是诚实但好奇的。被信任的第三方是一个合理的假设，因为C方的角色可以有权威机构（如政府）扮演或安全计算节点代替。</p><ul><li>第一部分：加密实体对齐</li></ul><p>由于A方和B方公司的用户群体不同，系统使用一种基于加密的用户ID对齐技术，来确保A方和B方不需要暴露各自的原始数据便可以对齐共同用户。</p><ul><li>第二部分：加密模型训练</li></ul><p>在确定共有实体后，各方可以使用这些共有实体的数据来协同地训练一个机器学习模型。</p><ol><li>协调者C创建密钥对，并将公共密钥发送给A方和B方。</li><li>A方和B方对中间结果进行加密和交换。中间结果用来帮助计算梯度和损失值。</li><li>A方和B方计算加密梯度并分别加入附加掩码。B方还会计算加密损失。A方和B方将加密的结果发送给C方。</li><li>C方对梯度和损失信息进行解密，并将结果发送回A方和B方。A方和B方解除梯度信息上的掩码，并根据这些梯度信息来更新模型参数</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C的动态内存分配</title>
    <link href="/2021/03/07/c%E7%9A%84%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <url>/2021/03/07/c%E7%9A%84%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h4 id="内存分配的方式"><a href="#内存分配的方式" class="headerlink" title="内存分配的方式"></a>内存分配的方式</h4><ul><li><strong>在静态存储区域中进行分配</strong></li></ul><p>​        内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，static变量</p><ul><li><strong>在栈中进行分配</strong></li></ul><p>​        在执行函数时，函数内<strong>局部变量</strong>的存储单元都可以在栈上创建，函数执行结束时，这些存储但愿自动被释放。效率很高，但是分配的内存容量比较有限</p><ul><li><strong>在堆中进行分配</strong></li></ul><p>​        在堆上分配也称为动态内存分配：程序在运行的时候用malloc等函数申请任意多少的内存，程序员自己负责在何时用free释放内存。动态内存分配的生存期由我们自己决定，使用非常灵活，但是问题相对也比较多；注意：如果没有释放的话，很容易就会造成内存溢出，因为堆中的内存块是全局的，因此不会因为函数的调用而结束</p><h4 id="动态内存分配中使用的函数："><a href="#动态内存分配中使用的函数：" class="headerlink" title="动态内存分配中使用的函数："></a><strong>动态内存分配中使用的函数：</strong></h4><p><strong>1:malloc函数:需要用到的头文件malloc.h</strong></p><p>void *malloc(size_t size) //————–&gt;返回的是一个通用类型的指针，根据需要去进行强转；<br>功能：允许从空闲内存池中分配连续内存但不初始化<br>参数：size参数实际就是一个所需字节数的整数 malloc(20);<br>返回：若分配成功则返回一个指向该内存块的指针，在使用时可根据需要做强制类型转换，否则返回NULL（空指针）//需要判空</p><p>free(p);//释放内存空间,将内存释放出来给系统；<br>free函数与malloc函数是成对出现的；<br>申请malloc的时候尽量去给它进行一下初始化，防止后面出现一些不确定性的东西；<br>malloc的生命周期：只要没有调用free这个函数，进程没有结束，那么此时，这个函数的生命周期就会一直存在在内存中；它是存放在堆空间中的，它不会因为你去函数调用的结束自动去释放，堆当中的内存是全局的。<br>如：int <em>p = (int</em> )malloc(n<em>sizeof(int)); //在<strong>空闲内存池</strong>中分配连续内存n</em>sizeof(int)个字节的<strong>堆内存空间</strong></p><p>malloc的相关实例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p,<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;   <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*(p+i));<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------\n&quot;</span>);<br>    &#125;   <br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please input one number:&quot;</span>);<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-comment">//申请</span><br>    <span class="hljs-keyword">int</span> *p = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-comment">//内存申请成功</span><br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">NULL</span>)&#123;<br>        out(p,n);<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            *(p+i)=i*i;<br>        &#125;<br>        out(p,n);<br>        <span class="hljs-comment">//释放掉堆内存</span><br>        <span class="hljs-built_in">free</span>(p);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//内存申请失败</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc is NULL!\n&quot;</span>);<br>    &#125;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2:calloc函数:需要用到的头文件stdlib.h</strong></p><p>void <em>colloc(size_t num_elements,size_t element_size);<br>功能:功能同malloc是一样的，但是作*<em>初始化</em></em><br>参数:num_elements是所需的元素的数量，element_size是每个元素的字节数<br>返回:同malloc函数一样<br>也是需要与free(p)进行对称使用<br>calloc相关代码如下所示:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please input one number:&quot;</span>);<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">int</span> *p = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">calloc</span>(n,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p+i));<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-built_in">free</span>(p);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;calloc error\n&quot;</span>);<br>    &#125;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3: realloc函数:需要用到的头文件(stdlib.h),动态扩大缩小申请的内存</strong></p><p>void *realloc(void *ptr,size_t new_size);<br>功能:在指针ptr指向的内存基础上扩大或者缩小内存<br>参数:ptr是指向先前通过<strong>malloc,calloc和realloc函数后分配的内存块的指针</strong>，new_size是内存块的新尺寸，可能大于或者小于原有内存尺寸；这个是追加到new_size的新的内存<br>realloc在C语言中也被称为动态数组；<br>realloc函数使用的注意点:<br>1:当扩展内存的时候，不会对添加进内存块的字节进行初始化<br>2:若不能调整内存则返回NULL，但原有内存中的数据是不会发生改变的<br>3:<strong>若第一个参数为NULL那么功能 等同与malloc函数，若第二个参数为0,那么会释放调用内存块</strong></p><blockquote><p><strong>realloc(NULL,10<em>size(int)) 等同malloc(10</em>sizeof(int));</strong><br><strong>realloc(p,0); 等同于free</strong></p></blockquote><p>4:当缩小或者扩大内存时，一般不会对其进行移动，若无法扩大内存块，那么realloc会在别处分配新的内存块，然后把旧内存块的数据复制到新块中，并将旧块删除释放内存。</p><p>realloc相关的的代码为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p ,<span class="hljs-keyword">int</span> n)</span></span>&#123; <br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span> ;i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(p+i));<br>    &#125;   <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-comment">//申请4个字节的堆内存空间，未初始化</span><br>    <span class="hljs-keyword">int</span> * p = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">5</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>) <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    *p = <span class="hljs-number">1</span>;<br>    *(p+<span class="hljs-number">1</span>)  =<span class="hljs-number">2</span>; <br>    p[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br>    p[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span>;<br>    p[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span>;<br>    out(p,<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;===============\n&quot;</span>);<br>    <span class="hljs-comment">//追加申请10个字节的内存空间，追加的空间也是未进行初始化的</span><br>     p = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">realloc</span>(p,<span class="hljs-number">10</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>) <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    p[<span class="hljs-number">6</span>] = <span class="hljs-number">6</span>;<br>    *(p+<span class="hljs-number">6</span>) = <span class="hljs-number">7</span>;<br>    *(p+<span class="hljs-number">7</span>) = <span class="hljs-number">8</span>;<br>    *(p+<span class="hljs-number">8</span>) = <span class="hljs-number">9</span>;<br>    *(p+<span class="hljs-number">9</span>) = <span class="hljs-number">10</span>; <br>    out(p,<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-comment">//free之后，将指针置为空</span><br>    p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>4:free函数</strong></p><p><strong>free之后如果还有这块内存地址的话，此时这块内存归还给了系统，（可能这块内存还处于一个空闲状态）但是还是可以对其进行操作。里面的值短暂的会保留</strong></p><p>free之后，申请内存的那个指针就会变成野指针(声明了，但是没有任何指向的指针)，有时候会出现野指针错误；<br>所以尽量在操作之后：将指针置为NULL<br>p=NULL；<br>注意：申请和释放是成对的，所以程序是不能进行多次free的，否则会崩溃的</p><h4 id="常见的内存错误："><a href="#常见的内存错误：" class="headerlink" title="常见的内存错误："></a><strong>常见的内存错误：</strong></h4><p>错误<br>使用未分配成功的内存<br>避免方式：在使用内存之前检查指针是否为NULL；<br>引用分配成功但尚未初始化的内存<br>避免方式：赋予初值，即便是赋予零值也不可省略<br>内存分配成功并且已经初始化，但操作越过了内存的边界<br>避免：注意下表的使用不能超出边界<br>忘记释放内存，造成内存泄露<br>避免方式：申请内存的方式和释放内存的方式需要成双成对<br>释放内存之后却继续去使用这一块内存<br>避免方式：使用free内存之后，把指针置为NULL；</p><p>内存错误的注意点：<br>指针消亡了，并不表示它所指向的内存会被自动释放,(在free之前，直接将指针设为NULL)；<br>内存释放了，并不代表指针会消亡或者成了NULL指针；(在free之后，指针并没有进行NULL设置)</p><p>野指针：<br>野指针的形成是指针变量没有被初始化，任何指针变量刚被创建的时候不会自动成为NULL指针，它的缺省值是最忌的，它会乱指一气</p><p>指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法内存</p><p>free内存块之后，需要将指针设置为NULL，如果没有设置为NULL，也会出现“野指针”，它是指向“垃圾”内存的指针；</p><p>多次free内存块，是会导致程序崩溃的。</p><p><a href="https://blog.csdn.net/qq_29924041/article/details/54897204?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161508383916780266253012%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161508383916780266253012&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-4-54897204.pc_search_result_before_js&amp;utm_term=c%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D">https://blog.csdn.net/qq_29924041/article/details/54897204?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161508383916780266253012%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161508383916780266253012&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-4-54897204.pc_search_result_before_js&amp;utm_term=c%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>横向联邦学习</title>
    <link href="/2021/03/06/3.6%E4%B8%BA%E4%BA%86%E8%82%9D%E5%91%A8%E6%8A%A5%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/03/06/3.6%E4%B8%BA%E4%BA%86%E8%82%9D%E5%91%A8%E6%8A%A5%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>横向联邦学习也称为按样本划分的联邦学习，可以应用于联邦学习的各个参与方的数据集有相同的特征空间和不同的样本空间的场景，类似于再表格视图中对数据进行水平划分的情况。</p><p>举例来说，两个地区的城市商业银行可能在各自的区域拥有非常不同的客户群体，所以他们的客户交集非常小，他们的数据集有不同的样本id。然而，他们的业务非常相似，因此他们的数据集的特征空间是相同的。这两家可以联合起来进行横向联邦学习以构建更好的风控模型。</p><p>关于横向联邦学习系统的安全性的定义，我们通常假设一个横向联邦学习系统的参与方都是诚实的，需要防范的对象是一个诚实但好奇的聚合服务器。即通常假设只有服务器才能使得数据参与方的隐私安全受到威胁。</p><p>以下是一些已提出的学习方法：</p><p>参与方独立地训练模型并只分享参数更新的子集，这是横向联邦学习的一种特殊形式。</p><p>在联邦学习框架下对用户模型更新或者对梯度信息进行安全聚合。</p><p>适用于模型参数聚合的加法同态加密，能够防御联邦学习系统里的中央服务器窃取模型信息或者数据隐私。</p><p>还有一种叫做深度梯度压缩的压缩方法，能够大幅度降低在大规模分布式训练中需要的通信宽带。</p><p>甚至，另一种考虑了恶意用户的安全模型也被提出，这带来了联邦学习新的安全挑战。当联邦学习训练结束时，聚合模型和整个模型的参数都会暴露给所有的参与方。</p><h4 id="横向联邦学习架构"><a href="#横向联邦学习架构" class="headerlink" title="横向联邦学习架构"></a>横向联邦学习架构</h4><h5 id="客户-服务器构架"><a href="#客户-服务器构架" class="headerlink" title="客户-服务器构架"></a>客户-服务器构架</h5><p>由于资料的缺失，这一部分先不讨论。</p><h5 id="对等网络架构"><a href="#对等网络架构" class="headerlink" title="对等网络架构"></a>对等网络架构</h5><p>在该架构下，不存在中央服务器或者协调方。在这种架构中，横向联邦学习系统的K个参与方或者分布式训练方。每一个训练方负责只使用本地数据来训练同一个机器学习模型，此外，训练方们使用安全链路在相互之间传递模型参数信息。为了保证任意两方之间的通信安全，需要使用例如基于公共密钥的加密方法等安全措施。</p><p>由于对等网络架构中不存在中央服务器，训练方必须提前商定发送和接受模型参数信息的顺序，主要有两个方法可以达到这个目的：</p><ol><li>循环传输</li></ol><p>训练方被组织成一条链。第一个训练方将当前的模型参数发送给它的下一个训练方。该训练方接受来自上游的模型参数后，将使用来自本地数据集的小批量数据更新收到的模型参数。之后，它将更新后的模型参数传输给下一个训练方。这一过程将被持续重复，直到模型参数收敛或达到允许的组大训练时间。</p><p>  2.随机传输</p><p>第k个训练方选取i，并将模型参数发送给训练方i。当第i个训练方收到来自第i个训练方的模型参数后，它将使用来自本地数据集的数据的<strong>mini-batch</strong>更新收到的模型参数。之后，第i个训练方选一个j，并将自己的模型参数发送给训练方j。这一过程将会重复，直到K个训练方同意模型参数收敛或达到允许的最大训练时间。这种方法叫做Gossip学习。</p><p>与客户-服务器相比，对等网络架构的一个明显优点便是除去了中央服务器，而这类服务器在一些实际应用中可能难以获得或建立。但这一特性，也可能带来一些坏处，例如在循环传输模式中，由于没有中央服务器，权重参数并不分批量更新而是连续更新,这将导致训练模型耗费更多的时间。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>怎么说呢，有点沉不下心来</title>
    <link href="/2021/03/05/3.4%E7%9A%84%E6%84%9F%E6%83%B3/"/>
    <url>/2021/03/05/3.4%E7%9A%84%E6%84%9F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>又是无聊的一天，上午两节水课（大物老师太菜了，鬼都不想听）。哦，对，上午还看了一下Java，挺难的，看不太懂，毕竟没有咋实践过。继续看吧，看总比不看好。</p><p>然后下午睡到三点多钟，爬起来学了一下博客做了点小功能，雪花呀，代码雨呀，有教程还是挺简单的，现在主要是在搞图标的问题，找也不好找，明天接着看一下吧。</p><p>然后打了两把排位，都赢了（鳄鱼）。上单霸主。</p><p>晚上写了一下博客，主要是工作室的任务还没完成，天天学这学那。所以写了点安全多方计算。算是理解深了点吧。</p><p>over。</p><p>明天体育课，，，操，，浪费老子100权重。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>安全多方计算的初认识</title>
    <link href="/2021/03/04/%E5%AE%89%E5%85%A8%E5%A4%9A%E6%96%B9%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%9D%E8%AE%A4%E8%AF%86/"/>
    <url>/2021/03/04/%E5%AE%89%E5%85%A8%E5%A4%9A%E6%96%B9%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h5 id="安全多方计算"><a href="#安全多方计算" class="headerlink" title="安全多方计算"></a>安全多方计算</h5><p>安全多方计算最初是针对一个安全两方计算问题，即所谓的“百万富翁问题”而被提出的（姚期智）。在安全多方计算中，目的是协同地从没一方的隐私输入中计算函数的结果。而不用将这些输入展示给其他方。安全多方计算告诉我们，对于任何功能需求，我们都可以在不必显示除了输出以外的前提下计算它。</p><p>为了了解安全多方计算，让我们先看两个场景例子: </p><p>（1）Alice认为她的了某种遗传疾病，想验证自己的想法。正好她知道Bob有一个关于疾病的DNA模型的数据库。如果她把自己的DNA样品寄给Bob，那么Bob可以给出她的DNA的诊断结果。但是Alice又不想别人知道，这是她的隐私。所以，她请求Bob帮忙诊断自己DNA的方式是不可行的。因为这样Bob就知道了她的DNA及相关私人信息。</p><p>（2）两个金融组织计划为了共同的利益决定互相合作一个项目。每个组织都想自己的需求获得满足。然而，他们的需求都是他们自己专有的数据，没人愿意透露给其他方，甚至是“信任”的第三方。那么他们如何在保护数据私密性的前提下合作项目呢？</p><blockquote><p><strong>当前，解决上述问题的策略是假设有可信任的服务提供者或是假设存在可信任的第三方。但是在目前多变和充满恶意的环境中，这是极具风险的。因此，可以支持联合计算并保护参与者私密的协议变的日益重要。</strong></p></blockquote><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20210304213040426.png"></p><p>证明安全多方学习计算协议是安全的标准方法为仿真范式。为了证明安全多方计算协议再仿真范式下可以抵御使t方腐败的敌手，需要构建一个模拟器，当给定t个勾结放的输入输出时，生成t个交互序列，从而使生成的交互序列与实际协议中生成的交互序列之间无法区分。</p><p>通常情况下，安全多方计算能够通过三种不同的框架来实现：不经意传输、秘密共享和阈值同态加密。</p><blockquote><p>从某种程度上讲，不经意传输协议和阈值同态加密方法都使用了秘密共享的思想，这可能就是为什么秘密共享被广泛认为是安全多方计算的核心。</p><p><img src="C:\Users\HP\AppData\Roaming\Typora\typora-user-images\image-20210304204437481.png" alt="image-20210304204437481"></p></blockquote><h5 id="同态加密"><a href="#同态加密" class="headerlink" title="同态加密"></a>同态加密</h5><p>同态加密方法H是一种通过对相关密文进行有效的操作（不需获知解密密钥），从而允许在加密内容上进行特定代数运算的加密方法。</p><p>…….</p><p>这篇先不深入解释同态加密。</p><p>over</p><p>额，图片好像上传不上去（不会）。先就这样吧，反正图片也就是一些解释和公式。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>无题</title>
    <link href="/2021/03/03/3.3%E7%9A%84%E6%84%9F%E6%83%B3/"/>
    <url>/2021/03/03/3.3%E7%9A%84%E6%84%9F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h5 id="写这个只是为了回忆一下今天的所作所为，起到一个警醒作用吧！"><a href="#写这个只是为了回忆一下今天的所作所为，起到一个警醒作用吧！" class="headerlink" title="写这个只是为了回忆一下今天的所作所为，起到一个警醒作用吧！"></a>写这个只是为了回忆一下今天的所作所为，起到一个警醒作用吧！</h5><ul><li>今天就两节课，一节微积分，一节离散。</li></ul><p>微积分还算好好听了，这个老师（高中喜）讲的课还算听得下去，感觉女的数学老师教学水平就那样，或者说不能激发我的兴趣把。还是得好好学，没办法，虽然感觉上了大学只想打游戏，但还是有自制力的。</p><p>离散就真鸡巴水，难怪王静（大一上计算机导论的老师）都可以教。看了两节课java（沉默王二），也没看进去多少。</p><ul><li>晚上打了两三个小时游戏，输（我carry）多赢（队友carry）少。当然有点不尽兴，不过也没有办法。</li><li>明天（星期四）似乎也是两节没啥意思的课（大物和思修）。突然想看python了，感觉挺容易的，java还得多学学，而且C都不怎么会。</li><li>慢慢学吧。</li><li>0：08</li><li>over</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C中static的运用</title>
    <link href="/2021/03/03/static/"/>
    <url>/2021/03/03/static/</url>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h5 id="1-局部变量"><a href="#1-局部变量" class="headerlink" title="1.局部变量"></a>1.局部变量</h5><p>定义在函数内部的变量（不加static修饰）属于这个范畴。编译器一般不对普通局部变量进行初始化，也就是说它的值在初始时是不确定的，除非对其显式赋值（啥意思？）。</p><blockquote><p>普通局部变量存储于进程栈空间，使用完毕会立即释放。</p></blockquote><p>静态局部变量使用static修饰符定义，即使在声明时未赋初值，编译器也会把它初始化为0。且静态局部变量存储于进程的全局数据区，即使函数返回，它的值也会保持不变。</p><p>小程序试一试（大一上期末考过类似的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">......自己臆想吧<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">n=<span class="hljs-number">10</span><br>n++=<span class="hljs-number">11</span><br>--------------------<br><span class="hljs-keyword">static</span> n=<span class="hljs-number">10</span><br>n++=<span class="hljs-number">11</span><br>--------------------<br>n=<span class="hljs-number">10</span><br>n++=<span class="hljs-number">11</span><br>--------------------<br><span class="hljs-keyword">static</span> n=<span class="hljs-number">11</span><br>n++=<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>由此可见，静态局部变量的效果跟全局变量有得一拼，而且位于函数体内部，就有利于程序的模块化了。</p><h5 id="2-全局变量"><a href="#2-全局变量" class="headerlink" title="2.全局变量"></a>2.全局变量</h5><p>全局变量定义在函数体外部，在全局数据区分配存储空间，且编译器会自动对其初始化。</p><p>普通全局变量对整个工程可见，其他文件可以使用<strong>extern</strong>外部声明后直接使用。也就是说其他文件不能再定义一个与其相同名字的变量了（否则编译器会认为它们是同一个变量）。</p><p>静态全局变量仅对当前文件可见，其他文件不可访问，其他文件可以定义与其同名的变量，两者互不影响。</p><blockquote><p>在定义不需要与其他文件共享的全局变量时，加上static关键字能够有效地降低程序模块之间的耦合，避免不同文件同名变量的冲突，且不会误使用。</p></blockquote><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的使用方式与全局变量类似，在函数的返回类型前加上static，就是静态函数。其特性如下： </p><ul><li>静态函数只能在声明它的文件中可见，其他文件不能引用该函数</li><li>不同的文件可以使用相同名字的静态函数，互不影响</li></ul><blockquote><p><em><strong>非</strong></em>静态函数可以在另一个文件中直接引用，甚至不必使用extern声明</p></blockquote><p>非静态函数可以在另一个文件中直接引用，甚至不必使用extern声明： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* file1.c */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello from fun.\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    fun();<br>    fun1();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* file2.c */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello from static fun1.\n&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用 <code>gcc file1.c file2.c</code>编译时，错误报告如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">/tmp/cc2VMzGR.o：在函数‘main’中： <br>static_fun.c:(.text+<span class="hljs-number">0x20</span>)：对‘fun1’未定义的引用<br>collect2: error: ld returned <span class="hljs-number">1</span> <span class="hljs-built_in">exit</span> status<br></code></pre></td></tr></table></figure><p>修改文件，不使用static修饰符，可在另一文件中引用该函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* file1.c */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello from fun.\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/* file2.c */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    fun();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>同样使用 <code>gcc file1.c file2.c</code>编译，编译通过，运行结果如下： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">-&gt; % ./a.out <br>hello from fun.<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>写下来感觉static还是很有用的（虽然我没用过），能够将代码模块化，达到所谓的松耦合。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/03/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><em><strong>粗斜体文本</strong></em><br><em><strong>粗斜体文本</strong></em><br><del>BAIDU.COM</del></p><ol><li>第一项： </li></ol><ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul><ul><li>第三项</li></ul><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/02/hello-world/"/>
    <url>/2021/03/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
