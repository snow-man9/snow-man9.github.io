{
    "version": "https://jsonfeed.org/version/1",
    "title": "hc‘s blog • All posts by \"算法\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/19/4.18%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/",
            "url": "http://example.com/2023/04/19/4.18%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/",
            "title": "4.18算法记录",
            "date_published": "2023-04-19T01:56:03.756Z",
            "content_html": "<p>（开始为了秋招做一点记录吧，不然就摆了）</p>\n<p>1.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZW1vdmUtbGlua2VkLWxpc3QtZWxlbWVudHMv\"> 移除链表元素</span></p>\n<p>​\t给你一个链表的头节点  <code>head</code>  和一个整数  <code>val</code>  ，请你删除链表中所有满足  <code>Node.val == val</code>  的节点，并返回 <strong>新的头节点</strong> 。</p>\n<p><a href=\"https://imgtg.com/image/uicAL\"><img data-src=\"https://i.imgtg.com/2023/04/18/uicAL.png\" alt=\"uicAL.png\"></a></p>\n<p><strong>代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeElements</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        ListNode dummyNode = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dummyNode.next = head;</span><br><span class=\"line\">        ListNode cur = head;</span><br><span class=\"line\">        ListNode pre = dummyNode;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.val == val) &#123;</span><br><span class=\"line\">                pre.next = cur.next;</span><br><span class=\"line\">                cur = pre.next;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                pre = pre.next;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummyNode.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//思考：</span></span><br><span class=\"line\"><span class=\"comment\">//题目不算难，但还是小费了点时间，因为对情况的模拟不到位，总是差不多就写了。下次一定要在脑子里想清楚在动笔！！</span></span><br></pre></td></tr></table></figure>\n<p>2.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZXNpZ24tbGlua2VkLWxpc3Qv\"> 设计链表</span></p>\n<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>\n<p>单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针 / 引用。</p>\n<p>如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。</p>\n<p>实现 MyLinkedList 类：</p>\n<ul>\n<li>MyLinkedList () 初始化 MyLinkedList 对象。</li>\n<li>int get (int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。</li>\n<li>void addAtHead (int val) 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>\n<li>void addAtTail (int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。</li>\n<li>void addAtIndex (int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。</li>\n<li>void deleteAtIndex (int index) 如果下标有效，则删除链表中下标为 index 的节点。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入</span><br><span class=\"line\">[<span class=\"string\">&quot;MyLinkedList&quot;</span>, <span class=\"string\">&quot;addAtHead&quot;</span>, <span class=\"string\">&quot;addAtTail&quot;</span>, <span class=\"string\">&quot;addAtIndex&quot;</span>, <span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;deleteAtIndex&quot;</span>, <span class=\"string\">&quot;get&quot;</span>]</span><br><span class=\"line\">[[], [<span class=\"number\">1</span>], [<span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>], [<span class=\"number\">1</span>], [<span class=\"number\">1</span>]]</span><br><span class=\"line\">输出</span><br><span class=\"line\">[<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">2</span>, <span class=\"keyword\">null</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">解释</span><br><span class=\"line\">MyLinkedList myLinkedList = <span class=\"keyword\">new</span> MyLinkedList();</span><br><span class=\"line\">myLinkedList.addAtHead(<span class=\"number\">1</span>);</span><br><span class=\"line\">myLinkedList.addAtTail(<span class=\"number\">3</span>);</span><br><span class=\"line\">myLinkedList.addAtIndex(<span class=\"number\">1</span>, <span class=\"number\">2</span>);    <span class=\"comment\">// 链表变为 1-&gt;2-&gt;3</span></span><br><span class=\"line\">myLinkedList.get(<span class=\"number\">1</span>);              <span class=\"comment\">// 返回 2</span></span><br><span class=\"line\">myLinkedList.deleteAtIndex(<span class=\"number\">1</span>);    <span class=\"comment\">// 现在，链表变为 1-&gt;3</span></span><br><span class=\"line\">myLinkedList.get(<span class=\"number\">1</span>);              <span class=\"comment\">// 返回 3</span></span><br></pre></td></tr></table></figure>\n<p><strong>代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    int val;</span></span><br><span class=\"line\"><span class=\"comment\">//    ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\">//  ListNode()&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       this.val=val;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//这个可以不写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLinkedList</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinkedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span> || index &gt;= size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode node = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= index; i++) &#123;</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addAtHead</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        addAtIndex(<span class=\"number\">0</span>, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addAtTail</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        addAtIndex(size, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addAtIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode cur = head.next;</span><br><span class=\"line\">        ListNode pre = head;</span><br><span class=\"line\">        ListNode node = <span class=\"keyword\">new</span> ListNode(val);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre.next = node;</span><br><span class=\"line\">        node.next = cur;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteAtIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span> || index &gt;= size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode cur = head.next;</span><br><span class=\"line\">        ListNode pre = head;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        pre.next = cur.next;</span><br><span class=\"line\">        size--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//题目的意思其实是根据单链表或者双链表来实现一个更强的链表。所以Listnode可以随便用，一开始没意识到这一点，所以有点无从下笔。其次，设置一个size和虚拟头节点也很关键！</span></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        }
    ]
}