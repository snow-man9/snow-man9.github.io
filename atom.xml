<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>hc‘s blog</title>
    <link href="http://example.com" />
    <updated>2023-04-19T15:31:29.482Z</updated>
    <entry>
        <id>http://example.com/2023/04/19/4.19%E6%91%86%E7%83%82%E8%AE%B0%E5%BD%95/</id>
        <title>4.19摆烂记录</title>
        <link rel="alternate" href="http://example.com/2023/04/19/4.19%E6%91%86%E7%83%82%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;p&gt;靠，睡觉了。今天没刷题。。。。。。。。。。感觉寄了&lt;/p&gt;
</content>
        <updated>2023-04-19T15:31:29.482Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/04/19/4.18%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/</id>
        <title>4.18算法记录</title>
        <link rel="alternate" href="http://example.com/2023/04/19/4.18%E7%AE%97%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;p&gt;（开始为了秋招做一点记录吧，不然就摆了）&lt;/p&gt;
&lt;p&gt;1.&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZW1vdmUtbGlua2VkLWxpc3QtZWxlbWVudHMv&#34;&gt; 移除链表元素&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;​	给你一个链表的头节点  &lt;code&gt;head&lt;/code&gt;  和一个整数  &lt;code&gt;val&lt;/code&gt;  ，请你删除链表中所有满足  &lt;code&gt;Node.val == val&lt;/code&gt;  的节点，并返回 &lt;strong&gt;新的头节点&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgtg.com/image/uicAL&#34;&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/04/18/uicAL.png&#34; alt=&#34;uicAL.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ListNode &lt;span class=&#34;title&#34;&gt;removeElements&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ListNode head, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode dummyNode = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ListNode(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dummyNode.next = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode cur = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode pre = dummyNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(cur != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(cur.val == val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                pre.next = cur.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cur = pre.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                pre = pre.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cur = cur.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dummyNode.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//思考：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//题目不算难，但还是小费了点时间，因为对情况的模拟不到位，总是差不多就写了。下次一定要在脑子里想清楚在动笔！！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZXNpZ24tbGlua2VkLWxpc3Qv&#34;&gt; 设计链表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;你可以选择使用单链表或者双链表，设计并实现自己的链表。&lt;/p&gt;
&lt;p&gt;单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针 / 引用。&lt;/p&gt;
&lt;p&gt;如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。&lt;/p&gt;
&lt;p&gt;实现 MyLinkedList 类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyLinkedList () 初始化 MyLinkedList 对象。&lt;/li&gt;
&lt;li&gt;int get (int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。&lt;/li&gt;
&lt;li&gt;void addAtHead (int val) 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。&lt;/li&gt;
&lt;li&gt;void addAtTail (int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。&lt;/li&gt;
&lt;li&gt;void addAtIndex (int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。&lt;/li&gt;
&lt;li&gt;void deleteAtIndex (int index) 如果下标有效，则删除链表中下标为 index 的节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;输入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;string&#34;&gt;&amp;quot;MyLinkedList&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;addAtHead&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;addAtTail&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;addAtIndex&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;get&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;deleteAtIndex&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;get&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[[], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;输出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;解释&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MyLinkedList myLinkedList = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyLinkedList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myLinkedList.addAtHead(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myLinkedList.addAtTail(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myLinkedList.addAtIndex(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);    &lt;span class=&#34;comment&#34;&gt;// 链表变为 1-&amp;gt;2-&amp;gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myLinkedList.get(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);              &lt;span class=&#34;comment&#34;&gt;// 返回 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myLinkedList.deleteAtIndex(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);    &lt;span class=&#34;comment&#34;&gt;// 现在，链表变为 1-&amp;gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myLinkedList.get(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);              &lt;span class=&#34;comment&#34;&gt;// 返回 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//class ListNode &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//    int val;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//    ListNode next;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//  ListNode()&amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//    ListNode(int val) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//       this.val=val;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//   &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//这个可以不写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyLinkedList&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ListNode head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyLinkedList&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        size = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        head = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ListNode(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(index &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || index &amp;gt;= size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode node = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt;= index; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            node = node.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; node.val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addAtHead&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        addAtIndex(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addAtTail&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        addAtIndex(size, val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addAtIndex&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; index, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (index &amp;gt; size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode cur = head.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode pre = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode node = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ListNode(val);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(index-- &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur = cur.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pre = pre.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pre.next = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        node.next = cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        size++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;deleteAtIndex&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(index &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || index &amp;gt;= size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode cur = head.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ListNode pre = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(index-- &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cur = cur.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            pre = pre.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pre.next = cur.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        size--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//题目的意思其实是根据单链表或者双链表来实现一个更强的链表。所以Listnode可以随便用，一开始没意识到这一点，所以有点无从下笔。其次，设置一个size和虚拟头节点也很关键！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <updated>2023-04-19T01:56:03.756Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/28/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%9C%89%E5%87%A0%E7%A7%8D%EF%BC%9F%E5%90%84%E8%87%AA%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F/</id>
        <title>Spring依赖注入有几种？各自有什么优缺点？</title>
        <link rel="alternate" href="http://example.com/2022/08/28/Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%9C%89%E5%87%A0%E7%A7%8D%EF%BC%9F%E5%90%84%E8%87%AA%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9%EF%BC%9F/"/>
        <content type="html">&lt;p&gt;IoC 和 DI 是 Spring 中最重要的两个概念，其中 IoC 为控制反转的思想，而 DI 依赖注入是 IoC 的具体实现。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h4&gt;
&lt;p&gt;在 Spring 中实现依赖注入的常见方式有以下 3 种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;属性注入（Field Injection）；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Setter 注入（Setter Injection）；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构造方法注入（Constructor Injection）。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;属性注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#属性注入&#34;&gt;#&lt;/a&gt; 属性注入&lt;/h4&gt;
&lt;p&gt;属性注入是日常开发中使用最多的一种注入方式：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UserController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 属性对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UserService userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/add&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; UserInfo &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String username, String password)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; userService.add(username, password);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;属性注入最大的优点就是实现简单、使用简单&lt;/strong&gt;，只需要给变量上添加一个注解（@Autowired），就可以在不 new 对象的情况下，直接获得注入的对象了（这就是 DI 的功能和魅力所在），所以它的优点就是使用简单。&lt;/p&gt;
&lt;h5 id=&#34;缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h5&gt;
&lt;p&gt;属性注入虽然使用简单，但是也存在很多问题，甚至编译器 Idea 都会提醒你 “不建议使用此注入方式”，Idea 的提示信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/10/Y8uCq.png&#34; alt=&#34;image-20220827130311145&#34;&gt;&lt;/p&gt;
&lt;p&gt;属性注入的缺点主要包含以下 3 个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;功能性问题：无法注入一个不可变的对象（final 修饰的对象）；&lt;/li&gt;
&lt;li&gt;通用性问题：只能适应于 IoC 容器；&lt;/li&gt;
&lt;li&gt;设计原则问题：更容易违背单一设计原则。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;setter注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#setter注入&#34;&gt;#&lt;/a&gt; Setter 注入&lt;/h4&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UserController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Setter 注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UserService userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setUserService&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UserService userService)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.userService = userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/add&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; UserInfo &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String username, String password)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; userService.add(username, password);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;优点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-2&#34;&gt;#&lt;/a&gt; 优点&lt;/h5&gt;
&lt;p&gt;完全符合单一职责的设计原则，因为每一个 Setter 只针对一个对象。&lt;/p&gt;
&lt;h5 id=&#34;缺点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-2&#34;&gt;#&lt;/a&gt; 缺点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;不能注入不可变对象（final 修饰的对象）；&lt;/li&gt;
&lt;li&gt;注入的对象可被修改。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;构造方法注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造方法注入&#34;&gt;#&lt;/a&gt; 构造方法注入&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;构造方法注入是 Spring 官方从 4.x 之后推荐的注入方式&lt;/strong&gt;，它的实现代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UserController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 构造方法注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UserService userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UserController&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UserService userService)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.userService = userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/add&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; UserInfo &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String username, String password)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; userService.add(username, password);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，&lt;strong&gt;如果当前的类中只有一个构造方法，那么 @Autowired 也可以省略&lt;/strong&gt;，所以以上代码还可以这样写：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UserController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 构造方法注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UserService userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UserController&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UserService userService)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.userService = userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/add&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; UserInfo &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String username, String password)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; userService.add(username, password);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;优点-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-3&#34;&gt;#&lt;/a&gt; 优点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;可注入不可变对象；&lt;/li&gt;
&lt;li&gt;注入对象不会被修改；&lt;/li&gt;
&lt;li&gt;注入对象会被完全初始化；&lt;/li&gt;
&lt;li&gt;通用性更好。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2022-08-28T06:02:50.667Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/28/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E7%BC%93%E5%AD%98%E7%9A%84%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%9F/</id>
        <title>如何保证数据库和缓存双写一致性？</title>
        <link rel="alternate" href="http://example.com/2022/08/28/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E7%BC%93%E5%AD%98%E7%9A%84%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%9F/"/>
        <content type="html">&lt;p&gt; 数据库和缓存的双写数据一致性问题，是一个和开发语言无关的公共问题。尤其在高并发的场景下，这个问题变得更加严重。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;常见方案&#34;&gt;&lt;a href=&#34;#常见方案&#34; class=&#34;headerlink&#34; title=&#34;常见方案&#34;&gt;&lt;/a&gt;常见方案&lt;/h4&gt;&lt;p&gt;通常情况下，我们使用缓存的目的主要是为了提升查询的性能。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y9WKC.png&#34; alt=&#34;image-20220826232725235&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是如果数据库中的某条数据，在放入缓存后又立马被更新了，那该如何更新缓存呢？&lt;/p&gt;
&lt;p&gt;目前有4种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先写缓存，再写数据库&lt;/li&gt;
&lt;li&gt;先写数据库，再写缓存&lt;/li&gt;
&lt;li&gt;先删缓存，再写数据库&lt;/li&gt;
&lt;li&gt;先写数据库，再删缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;先写缓存，再写数据库&#34;&gt;&lt;a href=&#34;#先写缓存，再写数据库&#34; class=&#34;headerlink&#34; title=&#34;先写缓存，再写数据库&#34;&gt;&lt;/a&gt;先写缓存，再写数据库&lt;/h4&gt;&lt;p&gt;实际上这种方案不可取。&lt;/p&gt;
&lt;p&gt;例如用户在刚写完缓存后，网络出现了异常，导致写数据库失败了。那么缓存这种数据库不存在的”假数据“就没有意义了。&lt;/p&gt;
&lt;h4 id=&#34;先写数据库，再写缓存&#34;&gt;&lt;a href=&#34;#先写数据库，再写缓存&#34; class=&#34;headerlink&#34; title=&#34;先写数据库，再写缓存&#34;&gt;&lt;/a&gt;先写数据库，再写缓存&lt;/h4&gt;&lt;p&gt;首先它可以避免之前的”假数据“问题，但是他有新的问题。&lt;/p&gt;
&lt;h4 id=&#34;先删缓存，再写数据库&#34;&gt;&lt;a href=&#34;#先删缓存，再写数据库&#34; class=&#34;headerlink&#34; title=&#34;先删缓存，再写数据库&#34;&gt;&lt;/a&gt;先删缓存，再写数据库&lt;/h4&gt;&lt;h4 id=&#34;先写数据库，再删缓存&#34;&gt;&lt;a href=&#34;#先写数据库，再删缓存&#34; class=&#34;headerlink&#34; title=&#34;先写数据库，再删缓存&#34;&gt;&lt;/a&gt;先写数据库，再删缓存&lt;/h4&gt;&lt;p&gt;推荐使用&lt;/p&gt;
&lt;p&gt;当然即使是这种方式还是存在着一定的问题，&lt;/p&gt;
&lt;p&gt;后续可以采用mq等方式来解决。&lt;/p&gt;
</content>
        <updated>2022-08-28T06:02:50.658Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/28/%E8%BE%93%E5%85%A5URL%E4%B9%8B%E5%90%8E%E4%BC%9A%E6%89%A7%E8%A1%8C%E4%BB%80%E4%B9%88/</id>
        <title>输入URL之后会执行什么</title>
        <link rel="alternate" href="http://example.com/2022/08/28/%E8%BE%93%E5%85%A5URL%E4%B9%8B%E5%90%8E%E4%BC%9A%E6%89%A7%E8%A1%8C%E4%BB%80%E4%B9%88/"/>
        <content type="html">&lt;p&gt; 在浏览器输入URL之后，它会执行以下几个流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行DNS域名解析；&lt;/li&gt;
&lt;li&gt;封装HTTP请求数据包；&lt;/li&gt;
&lt;li&gt;封装TCP请求数据包&lt;/li&gt;
&lt;li&gt;建立TCP连接（3次握手）；&lt;/li&gt;
&lt;li&gt;参数从客户端传递到服务器端；&lt;/li&gt;
&lt;li&gt;服务器端得到客户端参数之后，进行相应的业务处理，再将结果封装成HTTP包，返回给客户端；&lt;/li&gt;
&lt;li&gt;服务器端和客户端的交互完成，断开TCP连接（4次挥手）；&lt;/li&gt;
&lt;li&gt;浏览器通过自身执行引擎，渲染并展示最终结果给用户；&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;DNS域名解析&#34;&gt;&lt;a href=&#34;#DNS域名解析&#34; class=&#34;headerlink&#34; title=&#34;DNS域名解析&#34;&gt;&lt;/a&gt;DNS域名解析&lt;/h4&gt;&lt;p&gt;在网络中定位依靠IP进行身份定位，所以URL访问的第一步便是先要的到服务器端的IP地址。而得到服务器的IP地址需要使用 DNS（Domain Name System，域名系统）域名解析，DNS 域名解析就是通过 URL 找到与之相对应的 IP 地址。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：为什么不直接访问 IP 地址来请求服务器？因为 IP 地址很长，不方便记忆，而 URL 地址好记很多，所以会使用 URL 来替代 IP 地址，而 URL 就像 IP 地址的别名一样，用它可以定位到相应的 IP 地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DNS 域名解析的大致流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先检&lt;strong&gt;查浏览器中的 DNS 缓存&lt;/strong&gt;，如果浏览器中有对应的记录会直接使用，并完成解析；&lt;/li&gt;
&lt;li&gt;如果浏览器没有缓存，那就去&lt;strong&gt;查询操作系统的缓存&lt;/strong&gt;，如果查询到记录就可以直接返回 IP 地址，完成解析；&lt;/li&gt;
&lt;li&gt;如果操作系统没有 DNS 缓存，就会去&lt;strong&gt;查看本地 host 文件&lt;/strong&gt;，Windows 操作系统下，host 文件一般位于 “C:\Windows\System32\drivers\etc\hosts”，如果 host 文件有记录则直接使用；&lt;/li&gt;
&lt;li&gt;如果本地 host 文件没有相应的记录，会&lt;strong&gt;请求本地 DNS 服务器&lt;/strong&gt;，本地 DNS 服务器一般是由本地网络服务商如移动、电信提供。通常情况下可通过 DHCP 自动分配，当然你也可以自己手动配置。目前用的比较多的是谷歌提供的公用 DNS 是 8.8.8.8 和国内的公用 DNS 是 114.114.114.114。&lt;/li&gt;
&lt;li&gt;如果本地 DNS 服务器没有相应的记录，就会&lt;strong&gt;去根域名服务器查询&lt;/strong&gt;了，目前全球一共有 13 组根域名服务器（这里并不是指 13 台服务器，是指 13 个 ip 地址，按字母 a-m 编号），为了能更高效完成全球所有域名的解析请求，根域名服务器本身并不会直接去解析域名，而是会把不同的解析请求分配给下面的其他服务器去完成，下面是 DNS 域名系统的树状结构图：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y9b0L.png&#34; alt=&#34;image-20220827163817691&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;封装HTTP请求数据包&#34;&gt;&lt;a href=&#34;#封装HTTP请求数据包&#34; class=&#34;headerlink&#34; title=&#34;封装HTTP请求数据包&#34;&gt;&lt;/a&gt;封装HTTP请求数据包&lt;/h4&gt;&lt;p&gt;一个 HTTP 请求对象包含 4 部分内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求行&lt;/li&gt;
&lt;li&gt;请求报头&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;请求正文&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y9xMi.png&#34; alt=&#34;image-20220827163918979&#34;&gt;&lt;/p&gt;
&lt;p&gt;在得到了服务器IP后，紧接着会将本地的请求封装成一个HTTP数据包，如上图所示。&lt;/p&gt;
&lt;h4 id=&#34;封装TCP请求数据包&#34;&gt;&lt;a href=&#34;#封装TCP请求数据包&#34; class=&#34;headerlink&#34; title=&#34;封装TCP请求数据包&#34;&gt;&lt;/a&gt;封装TCP请求数据包&lt;/h4&gt;&lt;p&gt;HTTP底层是依赖TCP/IP协议实现的，所以在底层数据传输时，会将HTTP请求包进一步封装成TCP数据包。&lt;/p&gt;
&lt;h4 id=&#34;建立TCP连接（3次握手）&#34;&gt;&lt;a href=&#34;#建立TCP连接（3次握手）&#34; class=&#34;headerlink&#34; title=&#34;建立TCP连接（3次握手）&#34;&gt;&lt;/a&gt;建立TCP连接（3次握手）&lt;/h4&gt;&lt;p&gt;HTTP 通讯的基础是 TCP 连接，TCP 连接需要 3 次握手，3 次握手就是为了验证客户端的发送能力和接收能力，以及服务器端的发生能力和接收能力，就像打电话一样，通常的通话是这样开头的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;_我_：喂，能听到吗？&lt;/li&gt;
&lt;li&gt;_对方_：能听到，你能听到吗？（证明了对方的接收能力和我的发送能力）&lt;/li&gt;
&lt;li&gt;_我_：我也能听到，咱们聊正事吧。（证明了对方的发送能力和我的接收能力）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过以上 3 次握手就可以证明客户端的发送能力和接收能力，以及服务器端的发生能力和接收能力，这样就可以正式开始通讯了。&lt;/p&gt;
&lt;h4 id=&#34;服务器端获取到HTTP请求参数&#34;&gt;&lt;a href=&#34;#服务器端获取到HTTP请求参数&#34; class=&#34;headerlink&#34; title=&#34;服务器端获取到HTTP请求参数&#34;&gt;&lt;/a&gt;服务器端获取到HTTP请求参数&lt;/h4&gt;&lt;p&gt;数据在经过TCP传到服务器程序后，又会将TCP的数据包转换成HTTP数据包（这一切都是 TCP/IP 协议的功劳），这样服务器端就可以得到客户端发送的请求数据了。&lt;/p&gt;
&lt;h4 id=&#34;服务器端执行业务处理，并返回数据&#34;&gt;&lt;a href=&#34;#服务器端执行业务处理，并返回数据&#34; class=&#34;headerlink&#34; title=&#34;服务器端执行业务处理，并返回数据&#34;&gt;&lt;/a&gt;服务器端执行业务处理，并返回数据&lt;/h4&gt;&lt;p&gt;服务器端拿到了客户端的请求参数之后，会进行相应的业务处理，处理完成之后，再将处理的结果返回给客户端。返回的流程和发送的流程类似，先将结果封装成 HTTP 数据包，HTTP 数据包可分为以下 4 部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;状态行&lt;/li&gt;
&lt;li&gt;响应报头&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;响应正文&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;它的基本格式如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y9z1X.png&#34; alt=&#34;image-20220827165323473&#34;&gt;&lt;/p&gt;
&lt;p&gt;状态行用于描述服务器的返回状态，它由 3 部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTTP 版本号，如 HTTP/1.1；&lt;/li&gt;
&lt;li&gt;状态码，如 200；&lt;/li&gt;
&lt;li&gt;状态描述信息，如 OK；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常见的状态码有以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200：返回成功；&lt;/li&gt;
&lt;li&gt;301：永久重定向；&lt;/li&gt;
&lt;li&gt;302：临时重定向；&lt;/li&gt;
&lt;li&gt;404：未找到页面；&lt;/li&gt;
&lt;li&gt;500：服务器程序出错。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;响应正文就是返回给客户端的所有数据。&lt;/p&gt;
&lt;h4 id=&#34;断开TCP连接（4次挥手）&#34;&gt;&lt;a href=&#34;#断开TCP连接（4次挥手）&#34; class=&#34;headerlink&#34; title=&#34;断开TCP连接（4次挥手）&#34;&gt;&lt;/a&gt;断开TCP连接（4次挥手）&lt;/h4&gt;&lt;p&gt;在经过一次请求和一次响应之后，客户端和服务器的“交流”就结束了，此时就可以执行 TCP 连接断开的流程了，它需要 4 次挥手：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_客户端_：咱们分手吧；&lt;/li&gt;
&lt;li&gt;_服务器端_：好的，让我准备一下。&lt;/li&gt;
&lt;li&gt;_服务器端_：我准备好了，分手吧。&lt;/li&gt;
&lt;li&gt;_客户端_：好的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过了以上流程之后，TCP 的连接就断开了。&lt;/p&gt;
&lt;h4 id=&#34;浏览器渲染并展示结果&#34;&gt;&lt;a href=&#34;#浏览器渲染并展示结果&#34; class=&#34;headerlink&#34; title=&#34;浏览器渲染并展示结果&#34;&gt;&lt;/a&gt;浏览器渲染并展示结果&lt;/h4&gt;&lt;p&gt;经过TCP交互之后，客户端也得到了服务器端返回的数据，然后使用浏览器自身的执行引擎，将最终的结果展示给用户，整个执行流程就结束了。&lt;/p&gt;
</content>
        <updated>2022-08-28T06:02:50.653Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/27/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89%EF%BC%9A%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E5%8E%9F%E5%AD%90%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7/</id>
        <title>并发编程入门（1）：可见性、原子性和有序性</title>
        <link rel="alternate" href="http://example.com/2022/08/27/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%EF%BC%881%EF%BC%89%EF%BC%9A%E5%8F%AF%E8%A7%81%E6%80%A7%E3%80%81%E5%8E%9F%E5%AD%90%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7/"/>
        <content type="html">&lt;h4 id=&#34;并发程序幕后的故事&#34;&gt;&lt;a href=&#34;#并发程序幕后的故事&#34; class=&#34;headerlink&#34; title=&#34;并发程序幕后的故事&#34;&gt;&lt;/a&gt;并发程序幕后的故事&lt;/h4&gt;&lt;p&gt;一个核心矛盾：cpu、内存、I/O设备的速度差异&lt;/p&gt;
&lt;p&gt;cpu的速度是内存的100倍，&lt;/p&gt;
&lt;p&gt;内存是I/O的100倍。&lt;/p&gt;
&lt;p&gt;而程序大部分语句要访问内存，有些还要访问I/O，所以程序整体的性能屈居于最慢的操作—读写I/O设备。单方面提高cpu性能是无效的。&lt;/p&gt;
&lt;p&gt;为了平衡这三者的速度差异，计算机体系结构，操作系统，编译程序都做出了贡献：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cpu增加了缓存，以均衡与内存的速度差异；&lt;/li&gt;
&lt;li&gt;操作系统增加了进程、线程，以分时复用cpu，以均衡cpu与I/O设备的速度差异；&lt;/li&gt;
&lt;li&gt;编译程序优化指令执行次序，使得缓存能够得到更加合理的利用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，并发程序很多问题的根源也在这里。&lt;/p&gt;
&lt;h4 id=&#34;源头之一：缓存导致的可见性问题&#34;&gt;&lt;a href=&#34;#源头之一：缓存导致的可见性问题&#34; class=&#34;headerlink&#34; title=&#34;源头之一：缓存导致的可见性问题&#34;&gt;&lt;/a&gt;源头之一：缓存导致的可见性问题&lt;/h4&gt;&lt;p&gt;一个线程对共享变量的修改，另外一个线程能够立即看到，我们称之为可见性。&lt;/p&gt;
&lt;p&gt;在单核时代，cpu缓存与内存数据的一致性很好解决。&lt;/p&gt;
&lt;p&gt;在多核时代，每个cpu都有自己的缓存，这时 CPU 缓存与内存的数据一致性就没那么容易解决了，当多个线程在不同的 CPU 上执行时，这些线程操作的是不同的 CPU 缓存。比如下图中，线程 A 操作的是 CPU-1 上的缓存，而线程 B 操作的是 CPU-2 上的缓存，很明显，这个时候线程 A 对变量 V 的操作对于线程 B 而言就不具备可见性了。这个就属于硬件程序员给软件程序员挖的“坑”。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y9qxK.png&#34; alt=&#34;image-20220826144959349&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;源头之二：线程切换带来的原子性问题&#34;&gt;&lt;a href=&#34;#源头之二：线程切换带来的原子性问题&#34; class=&#34;headerlink&#34; title=&#34;源头之二：线程切换带来的原子性问题&#34;&gt;&lt;/a&gt;源头之二：线程切换带来的原子性问题&lt;/h4&gt;&lt;p&gt;由于IO太慢，早期的操作系统就发明了多进程，即使在单核的cpu上，我们也可以一边听歌一边写代码。&lt;/p&gt;
&lt;p&gt;java并发程序都是基于多线程的，自然也会涉及到任务切换，也许你想不到，任务切换竟然也是并发编程里诡异 Bug 的源头之一。任务切换的时机大多数是在时间片结束的时候，我们现在基本都使用高级语言编程，高级语言里一条语句往往需要多条 CPU 指令完成，例如上面代码中的count += 1，至少需要三条 CPU 指令。&lt;/p&gt;
&lt;p&gt;指令 1：首先，需要把变量 count 从内存加载到 CPU 的寄存器；&lt;/p&gt;
&lt;p&gt;指令 2：之后，在寄存器中执行 +1 操作；&lt;/p&gt;
&lt;p&gt;指令 3：最后，将结果写入内存（缓存机制导致可能写入的是 CPU 缓存而不是内存）。&lt;/p&gt;
&lt;p&gt;操作系统做任务切换，可以发生在任何一条CPU 指令执行完，是的，是 CPU 指令，而不是高级语言里的一条语句。对于上面的三条指令来说，我们假设 count=0，如果线程 A 在指令 1 执行完后做线程切换，线程 A 和线程 B 按照下图的序列执行，那么我们会发现两个线程都执行了 count+=1 的操作，但是得到的结果不是我们期望的 2，而是 1。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y95Ja.png&#34; alt=&#34;image-20220826154247317&#34;&gt;&lt;/p&gt;
</content>
        <updated>2022-08-27T13:07:03.041Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/22/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E7%94%A8%E6%B5%AE%E7%82%B9%E5%9E%8B%E8%A1%A8%E7%A4%BA%E9%87%91%E9%A2%9D/</id>
        <title>为什么不能用浮点型表示金额</title>
        <link rel="alternate" href="http://example.com/2022/08/22/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E7%94%A8%E6%B5%AE%E7%82%B9%E5%9E%8B%E8%A1%A8%E7%A4%BA%E9%87%91%E9%A2%9D/"/>
        <content type="html">&lt;p&gt;由于计算机中保存的小数其实是十进制的小数的近似值，并不是准确值，所以，千万不要在代码中使用浮点数来表示金额等重要的指标。&lt;/p&gt;
&lt;p&gt;建议使用BigDecimal或者Long（单位为分）来表示金额。&lt;/p&gt;
</content>
        <updated>2022-08-22T07:26:44.498Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/22/%E7%B1%BB%E5%8F%98%E9%87%8F%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</id>
        <title>类变量，成员变量和局部变量</title>
        <link rel="alternate" href="http://example.com/2022/08/22/%E7%B1%BB%E5%8F%98%E9%87%8F%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
        <content type="html">&lt;p&gt;java 中共有三种变量，分别是类变量，成员变量和局部变量。分别存放在 jvm 的方法区、堆内区、和栈内区中。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Variables&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 类变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 局部变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;a 是类变量，b 是成员变量，而变量 c 和 d 是局部变量。&lt;/p&gt;
&lt;p&gt;因为只有共享变量才会遇到并发问题，所以，变量 a 和 b 是共享变量，变量 c 和 d 是非共享变量。所以如果遇到多线程场景，对于变量 a 和 b 的操作是需要考虑线程安全的，而对于线程 c 和 d 的操作是不需要考虑线程安全的。&lt;/p&gt;
</content>
        <updated>2022-08-22T07:26:44.492Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/22/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
        <title>构造函数</title>
        <link rel="alternate" href="http://example.com/2022/08/22/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
        <content type="html">&lt;p&gt;主要用来创建对象时初始化对象，即为对象那个 成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* 矩形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Rectangle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;      * 构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;      */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Rectangle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; length, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; width)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.length = length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.width = width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(String []args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//使用构造函数创建对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Rectangle rectangle = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Rectangle(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;特别的一个类可以有多个构造函数，可根据其参数个数的不同或参数类型的不同来区分它们即构造函数的重载。&lt;/p&gt;
&lt;p&gt;构造函数跟一般的实例方法十分相似；但是与其它方法不同，构造器没有返回类型，不会被继承，且可以有范围修饰符。&lt;/p&gt;
&lt;p&gt;构造器的函数名称必须和它所属的类的名称相同。它承担着初始化对象数据成员的任务。&lt;/p&gt;
&lt;p&gt;如果在编写一个可实例化的类时没有专门编写构造函数，多数编程语言会自动生成缺省构造器（默认构造函数）。默认构造函数一般会把成员变量的值初始化为默认值，如int -&amp;gt; 0，Integer -&amp;gt; null。&lt;/p&gt;
&lt;p&gt;如果在编写一个可实例化的类时没有专门编写构造函数，默认情况下，一个Java类中会自动生成一个默认无参构造函数。默认构造函数一般会把成员变量的值初始化为默认值，如int -&amp;gt; 0，Integer -&amp;gt; null。&lt;/p&gt;
&lt;p&gt;但是，如果我们手动在某个类中定义了一个有参数的构造函数，那么这个默认的无参构造函数就不会自动添加了。需要手动创建！&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* 矩形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Rectangle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;      * 构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;      */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Rectangle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; length, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; width)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.length = length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.width = width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;      * 无参构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;      */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Rectangle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

</content>
        <updated>2022-08-22T07:26:44.485Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/22/%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD/</id>
        <title>方法重写和重载</title>
        <link rel="alternate" href="http://example.com/2022/08/22/%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD/"/>
        <content type="html">&lt;p&gt;重载：指的是在同一个类中，多个函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。&lt;/p&gt;
&lt;p&gt;重写：指的是在Java的子类与父类中有两个名称、参数列表都相同的方法的情况。由于他们具有相同的方法签名，所以子类中的新方法将覆盖父类中原有的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//重载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Dog&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bark&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;woof &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//overloading method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bark&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i&amp;lt;num; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;woof &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在编译期，编译期可以根据方法签名（方法名和参数情况）情况确定具体哪个bark方法被调用&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//重载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Dog&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bark&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;woof &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Hound&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Dog&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sniff&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;sniff &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bark&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;bowl&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OverridingTest&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String [] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Dog dog = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Hound();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dog.bark();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;bowl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的例子中，我们分别在父类、子类中都定义了bark方法，并且他们都是无参方法，所以我们就说这种情况就是方法重写。即子类Hound重写了父类Gog中的bark方法。&lt;/p&gt;
&lt;p&gt;在测试的main方法中，&lt;code&gt;dog&lt;/code&gt;对象被定义为&lt;code&gt;Dog&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;在编译期，编译器会检查Dog类中是否有可访问的&lt;code&gt;bark()&lt;/code&gt;方法，只要其中包含&lt;code&gt;bark（）&lt;/code&gt;方法，那么就可以编译通过。&lt;/p&gt;
&lt;p&gt;在运行期，&lt;code&gt;Hound&lt;/code&gt;对象被&lt;code&gt;new&lt;/code&gt;出来，并赋值给&lt;code&gt;dog&lt;/code&gt;变量，这时，JVM是明确的知道&lt;code&gt;dog&lt;/code&gt;变量指向的其实是&lt;code&gt;Hound&lt;/code&gt;对象的引用。所以，当&lt;code&gt;dog&lt;/code&gt;调用&lt;code&gt;bark()&lt;/code&gt;方法的时候，就会调用&lt;code&gt;Hound&lt;/code&gt;类中定义的&lt;code&gt;bark（）&lt;/code&gt;方法。这就是所谓的动态多态性。&lt;/p&gt;
&lt;p&gt;方法重写需满足以下条件&lt;/p&gt;
&lt;p&gt;1、参数列表必须完全与被重写方法的相同； 2、返回类型必须完全与被重写方法的返回类型相同； 3、访问级别的限制性一定不能比被重写方法的强； 4、访问级别的限制性可以比被重写方法的弱； 5、重写方法一定不能抛出新的检查异常或比被重写的方法声明的检查异常更广泛的检查异常 6、重写的方法能够抛出更少或更有限的异常（也就是说，被重写的方法声明了异常，但重写的方法可以什么也不声明） 7、不能重写被标示为final的方法； 8、如果不能继承一个方法，则不能重写这个方法。&lt;/p&gt;
</content>
        <updated>2022-08-22T07:26:44.476Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/21/%E5%A4%9A%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</id>
        <title>多继承问题</title>
        <link rel="alternate" href="http://example.com/2022/08/21/%E5%A4%9A%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;p&gt;Java 中支持一个类同时实现多个接口，但是不支持同时继承多个类。但是这个问题在 Java 8 之后也不绝对了。&lt;/p&gt;
&lt;p&gt;一个类，只有一个父类的情况，我们叫做单继承。而一个类，同时有多个父类的情况，叫做多继承。&lt;/p&gt;
&lt;p&gt;在 Java 中，一个类，只能通过 extends 关键字继承一个类，不允许多继承。但是，多继承在其他的面向对象语言中是有可能支持的。&lt;/p&gt;
&lt;p&gt;像 C++ 就是支持多继承的，主要是因为编程的过程是对现实世界的一种抽象，而现实世界中，确实存在着需要多继承的情况。比如维基百科中关于多继承举了一个例子：&lt;/p&gt;
&lt;p&gt;例如，可以创造一个 “哺乳类动物” 类别，拥有进食、繁殖等的功能；然后定义一个子类型 “猫”，它可以从父类继承上述功能。&lt;/p&gt;
&lt;p&gt;但是，&amp;quot;猫&amp;quot; 还可以作为 &amp;quot;宠物&amp;quot; 的子类，拥有一些宠物独有的能力。&lt;/p&gt;
&lt;p&gt;所以，有些面向对象语言是支持多重继承的。&lt;/p&gt;
&lt;p&gt;但是，多年以来，多重继承一直都是一个敏感的话题，反对者指它增加了程序的复杂性与含糊性。&lt;/p&gt;
&lt;h3 id=&#34;菱形继承问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#菱形继承问题&#34;&gt;#&lt;/a&gt; 菱形继承问题&lt;/h3&gt;
&lt;p&gt;假设我们有类 B 和类 C，它们都继承了相同的类 A。另外我们还有类 D，类 D 通过多重继承机制继承了类 B 和类 C。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/10/Y83ic.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这时候，因为 D 同时继承了 B 和 C，并且 B 和 C 又同时继承了 A，那么，D 中就会因为多重继承，继承到两份来自 A 中的属性和方法。&lt;/p&gt;
&lt;p&gt;这时候，在使用 D 的时候，如果想要调用一个定义在 A 中的方法时，就会出现歧义。&lt;/p&gt;
&lt;p&gt;因为这样的继承关系的形状类似于菱形，因此这个问题被形象地称为菱形继承问题。&lt;/p&gt;
&lt;p&gt;而 C++ 为了解决菱形继承问题，又引入了&lt;strong&gt;虚继承&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为支持多继承，引入了菱形继承问题，又因为要解决菱形继承问题，引入了虚继承。而经过分析，人们发现我们其实真正想要使用多继承的情况并不多。&lt;/p&gt;
&lt;p&gt;所以，在 Java 中，不允许 “实现多继承”，即一个类不允许继承多个父类。但是 Java 允许 “声明多继承”，即一个类可以实现多个接口，一个接口也可以继承多个父接口。由于接口只允许有方法声明而不允许有方法实现（Java 8 以前），这就避免了 C++ 中多继承的歧义问题。&lt;/p&gt;
&lt;p&gt;但是，Java 不支持多继承，在 Java 8 中支持了默认函数（default method ）之后就不那么绝对了。&lt;/p&gt;
&lt;p&gt;虽然我们还是没办法使用 extends 同时继承多个类，但是因为有了默认函数，我们有可能通过 implements 从多个接口中继承到多个默认函数，那么，又如何解决这种情况带来的菱形继承问题呢？&lt;/p&gt;
</content>
        <updated>2022-08-21T09:04:26.664Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/08/19/java%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81/</id>
        <title>java中的多态</title>
        <link rel="alternate" href="http://example.com/2022/08/19/java%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81/"/>
        <content type="html">&lt;p&gt;同一操作作用于不同的对象，可以有不同的解释，产生不同的结果。&lt;/p&gt;
&lt;p&gt;java中的多态是一种运行期的状态。满足三个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有类继承或者接口实现&lt;/li&gt;
&lt;li&gt;子类要重写父类的方法&lt;/li&gt;
&lt;li&gt;父类的引用指向子类的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Parent&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sout(&lt;span class=&#34;string&#34;&gt;&amp;quot;im Parent&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Son&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Parent&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;// 1.有类继承或者接口实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;// 2.子类要重写父类的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sout(&lt;span class=&#34;string&#34;&gt;&amp;quot;im Son&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Daughter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Parent&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;// 1.有类继承或者接口实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&#34;comment&#34;&gt;// 2.子类要重写父类的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sout(&lt;span class=&#34;string&#34;&gt;&amp;quot;im Daughter&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Parent p = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Son(); &lt;span class=&#34;comment&#34;&gt;//3.父类的引用指向子类的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Parent p1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Daughter(); &lt;span class=&#34;comment&#34;&gt;//3.父类的引用指向子类的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样，就实现了多态，同样是Parent类的实例，p.call 调用的是Son类的实现、p1.call调用的是Daughter的实现。&lt;/p&gt;
&lt;p&gt;有人说，你自己定义的时候不就已经知道p是son，p1是Daughter了么。但是，有些时候你用到的对象并不都是自己声明的。&lt;/p&gt;
&lt;p&gt;比如Spring 中的IOC出来的对象，你在使用的时候就不知道他是谁，或者说你可以不用关心他是谁。根据具体情况而定。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IOC，是Ioc—Inversion of Control 的缩写，中文翻译成“控制反转”，它是一种设计思想，意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。&lt;/p&gt;
&lt;p&gt;换句话说当我们使用Spring框架的时候，对象是Spring容器创建出来并由容器进行管理，我们只需要使用就行了。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <updated>2022-08-19T07:57:49.921Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/01/OP-TEE%E4%B8%ADTA%E4%B8%8ECA%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3-------%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%AF%87/</id>
        <title>OP-TEE中TA与CA执行流程详解--软件架构篇</title>
        <link rel="alternate" href="http://example.com/2021/09/01/OP-TEE%E4%B8%ADTA%E4%B8%8ECA%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3-------%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%AF%87/"/>
        <content type="html">&lt;p&gt;要使用OP-TEE来实现特定的安全功能就需要开发者根据自己的实际需求开发特定的CA和TA程序，并将TA集成到OP-TEE中。CA端负责实现在RTOS端userspace层面的对外接口，而TA端的代码则是在OP-TEE OS的userspace层面负责实现具体的安全功能，例如使用何种算法组合来对数据进行安全处理，对处理后的数据的安全保存，解密加密数据等等功能。接下来的章节将详细介绍CA到TA之间的所有流程以及相关结构体设置，接口调用等等，关于如何在OP-TEE中添加自有的TA和CA程序请参考文档《2. OP-TEE中添加自己的TA和CA》。关于OP-TEE的中断处理的流程请查阅《OP-TEE中的中断处理》相关文章，接下来的章节将介绍不考虑中断的情况下，一个完整的TA和CA之间进行调用的完整过程分析。下图为系统中CA与TA之间执行的软件框图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/10/YX5qD.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</content>
        <updated>2021-09-01T12:41:18.848Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/09/01/OP-TEE%E4%B8%ADCA%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B------%E7%B3%BB%E7%BB%9F%E5%90%84%E5%B1%82%E9%9D%A2%E5%85%B3%E7%B3%BB/</id>
        <title>OP-TEE中CA接口调用的完整流程--系统各层面关系</title>
        <link rel="alternate" href="http://example.com/2021/09/01/OP-TEE%E4%B8%ADCA%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B------%E7%B3%BB%E7%BB%9F%E5%90%84%E5%B1%82%E9%9D%A2%E5%85%B3%E7%B3%BB/"/>
        <content type="html">&lt;p&gt;二级厂商需要实现自有feature，需要添加自己的TA 和CA接口，当CA部分的接口需要提供给app层面调用的时候，一般做法是在framwork中建立特定的service，在service中调用CA接口。同时也会建立对应的client部分，一般做法是在framwork中建立特定的service，在service中调用CA接口，同时也会建立对应的client部分，client部分与service部分通过Binder的方式进行同行来触发CA接口调用的操作。而对于APP层面，开发者会将client部分提供的接口以JNI的方式进行封装暴露给上层APP调用。&lt;/p&gt;
&lt;p&gt;当上层APP调用封装好的JNI接口后，CA接口是如何通知特定的TA执行特定操作的呢？CA与TA之间的数据是如何传递的呢？cortex的状态是如何切换的呢？本文将详细讲解一次CA接口调用后功能实现的完整流程（本文不讨论FIQ和IRQ的情况，只讨论通过调用SMC指令调用到TEE的情况）。&lt;/p&gt;
&lt;h2 id=&#34;1-支持TEE的系统各层面关系图&#34;&gt;&lt;a href=&#34;#1-支持TEE的系统各层面关系图&#34; class=&#34;headerlink&#34; title=&#34;1.支持TEE的系统各层面关系图&#34;&gt;&lt;/a&gt;1.支持TEE的系统各层面关系图&lt;/h2&gt;&lt;p&gt;下图为层面结构图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/10/Y86qU.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;　当CA接口处于userspace层面，整个调用过程需要经过kernel space层面， linux driver层面， Monitor态中断处理层面， TEE OS kernel层面， TEE的userspace层面（TA）。&lt;/p&gt;
&lt;h2 id=&#34;2-userspace到kernelspace&#34;&gt;&lt;a href=&#34;#2-userspace到kernelspace&#34; class=&#34;headerlink&#34; title=&#34;2.userspace到kernelspace&#34;&gt;&lt;/a&gt;2.userspace到kernelspace&lt;/h2&gt;&lt;p&gt;在userspace层面调用CA接口后会触发system call操作，系统调用会将Lixnux陷入内核态，此时系统处于kernel space，然后根据传入的参数，找到对应的TEE driver，整个过程大致如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/10/Y88rY.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于该部分更加详细的内容，例如：软中断如何在kernel中注册的，系统调用的定义等等可查找系统调用（systemcall）和驱动的相关资料进行了解。&lt;/p&gt;
&lt;h2 id=&#34;3-TEE-driver到monitor态&#34;&gt;&lt;a href=&#34;#3-TEE-driver到monitor态&#34; class=&#34;headerlink&#34; title=&#34;3.TEE driver到monitor态&#34;&gt;&lt;/a&gt;3.TEE driver到monitor态&lt;/h2&gt;&lt;p&gt;在TEE的driver中，最终会调用SMC这条汇编指令来实现与OP-TEE的沟通，当调用SMC汇编指令之后，会触发SMC软中断，改软中断的处理在Cortex的Monitor态中进行，该软中断会根据发送指令是属于安全侧请求哈市非安全侧的请求来控制是将cortex切换到secure world态还是non-secure world态。该切换动作在ATF的SMC中断处理函数中被实现。&lt;/p&gt;
&lt;h2 id=&#34;4-TEE-kernel-space到TEE-userspace&#34;&gt;&lt;a href=&#34;#4-TEE-kernel-space到TEE-userspace&#34; class=&#34;headerlink&#34; title=&#34;4.TEE kernel space到TEE userspace&#34;&gt;&lt;/a&gt;4.TEE kernel space到TEE userspace&lt;/h2&gt;&lt;p&gt;当SMC中断处理函数完成了将cortex的状态切换到secure world态以及相关参数的拷贝动作之后，TEE OS将接管剩下的操作。TEE OS首先将会获取从CA端传递过来的数据，然后解析出数据中写入的TA的UUID，然后查找对应的TA image是否被挂载到了 TEE OS中。&lt;/p&gt;
&lt;p&gt;　　如果没有TEE OS将会与常驻在linux中的tee_supplicant进程通信，从文件系统中获取到TA image文件，并传递給TEE OS，然后加载该TA image。处理完整之后，TEE OS会切换到TEE userspace态，并将CA传递过来的其他参数传给具体的TA process，TA process获取到参数后，首先需要解除出参数中的commond ID值，根据具体的command ID值来做具体的操作。&lt;/p&gt;
&lt;p&gt;当然TEE OS在加载TA image的时候会有电子验签操作来验证TA image的合法性。上述步骤的大致流程图如下：&lt;br&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/10/Y8XQv.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于一次完整的CA调用过程需要做一次调用执行initContext, Opensession, InvokeCommand, close session, FinalizeContext操作，所以上图只是大致流程，关于详细部分将会在后期章节中节后代码逐步讲解。&lt;/p&gt;
&lt;h2 id=&#34;5-GP规定的C端接口&#34;&gt;&lt;a href=&#34;#5-GP规定的C端接口&#34; class=&#34;headerlink&#34; title=&#34;5.GP规定的C端接口&#34;&gt;&lt;/a&gt;5.GP规定的C端接口&lt;/h2&gt;&lt;p&gt;在GP中规定的CA端接口较少，主要的是五个接口，分别如下：&lt;/p&gt;
&lt;p&gt;TEEC_InitializeContext: 初始化TEE context，完成open tee driver，建立与TEE之间的context&lt;/p&gt;
&lt;p&gt;TEEC_OpenSession: 建立CA与TA之间的会话窗口&lt;/p&gt;
&lt;p&gt;TEEC_InvokeCommand: 想TA发送执行请求来执行具体的操作&lt;/p&gt;
&lt;p&gt;TEEC_CloseSession: 关闭CA与TA之间的会话窗口&lt;/p&gt;
&lt;p&gt;TEEC_FinalizeContext:清空建立的contex&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;转载自：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NodWFpZmVuZ3l1bi9hcnRpY2xlL2RldGFpbHMvNzE2OTczNzE=&#34;&gt;https://blog.csdn.net/shuaifengyun/article/details/71697371&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;自己差不多抄了一遍，大概流程看了一下，还是有些细节不太懂。很多操作没有见过，也不知道为什么要这样做。&lt;/p&gt;
</content>
        <updated>2021-09-01T11:31:10.665Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/08/27/3%20Modern%20Trusted%20Computing%20Hardware/</id>
        <title>3 Modern Trusted Computing Hardware</title>
        <link rel="alternate" href="http://example.com/2021/08/27/3%20Modern%20Trusted%20Computing%20Hardware/"/>
        <content type="html">&lt;p&gt;本章介绍了ARM TrustZone的背景及其缺点。&lt;/p&gt;
&lt;h2 id=&#34;3-1-ARM-TrustZone&#34;&gt;&lt;a href=&#34;#3-1-ARM-TrustZone&#34; class=&#34;headerlink&#34; title=&#34;3.1 ARM TrustZone&#34;&gt;&lt;/a&gt;3.1 &lt;strong&gt;ARM TrustZone&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;ARM TrustZone 是 ARM 对可信计算的硬件支持。它是在许多最新的 ARM 处理器（包括 Cortex A8、Cortex A9 和 Cortex A15）中发现的一组安全扩展。 ARM TrustZone 提供两个由硬件访问控制支持的虚拟处理器。分别为secure world(SW)和normal world (NW)，根据单个 ARM SoC 的具体情况，单个资源可以在两个世界之间进行强分区，可以跨世界共享，或仅分配给单个世界。&lt;/p&gt;
&lt;h3 id=&#34;Secure-monitor&#34;&gt;&lt;a href=&#34;#Secure-monitor&#34; class=&#34;headerlink&#34; title=&#34;Secure monitor.&#34;&gt;&lt;/a&gt;&lt;strong&gt;Secure monitor.&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;安全监视器是一种 ARM 处理器模式，旨在在安全和正常世界之间切换&lt;/p&gt;
&lt;h3 id=&#34;Secure-world-entry-exit&#34;&gt;&lt;a href=&#34;#Secure-world-entry-exit&#34; class=&#34;headerlink&#34; title=&#34;Secure world entry/exit.&#34;&gt;&lt;/a&gt;&lt;strong&gt;Secure world entry/exit.&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;根据设计，ARM 平台总是首先进入安全世界。 在这里，系统固件可以在任何不受信任的代码（例如操作系统）有机会运行之前提供安全世界的运行时环境。&lt;/p&gt;
&lt;h3 id=&#34;Curtained-memory&#34;&gt;&lt;a href=&#34;#Curtained-memory&#34; class=&#34;headerlink&#34; title=&#34;Curtained memory&#34;&gt;&lt;/a&gt;&lt;strong&gt;Curtained memory&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在启动时，在安全监视器中运行的软件可以仅将一系列物理地址分配给安全世界，从而创建窗帘内存的抽象——系统其余部分无法访问内存。&lt;/p&gt;
&lt;h2 id=&#34;3-2-Shortcomings-of-ARM-TrustZone&#34;&gt;&lt;a href=&#34;#3-2-Shortcomings-of-ARM-TrustZone&#34; class=&#34;headerlink&#34; title=&#34;3.2 Shortcomings of ARM TrustZone&#34;&gt;&lt;/a&gt;&lt;strong&gt;3.2 Shortcomings of ARM TrustZone&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;尽管 ARM TrustZone 规范描述了在安全世界中如何保护处理器和内存子系统，该规范没有说明应该如何保护大多数其他资源。 这导致了碎片化——SoC 为 TrustZone 提供了各种形式的不同硬件资源保护，或者根本没有保护。&lt;/p&gt;
&lt;h3 id=&#34;Storage-（No-trusted-storage）&#34;&gt;&lt;a href=&#34;#Storage-（No-trusted-storage）&#34; class=&#34;headerlink&#34; title=&#34;*Storage.*（No trusted storage）&#34;&gt;&lt;/a&gt;*Storage.*（No trusted storage）&lt;/h3&gt;&lt;p&gt;令人惊讶的是，ARM TrustZone 规范没有提供有关如何为 TrustZone 实施安全存储的指南。 缺乏安全存储大大降低了 TrustZone 作为可信计算硬件的有效性。&lt;/p&gt;
&lt;h3 id=&#34;Crypto-needs-（No-trusted-storage）&#34;&gt;&lt;a href=&#34;#Crypto-needs-（No-trusted-storage）&#34; class=&#34;headerlink&#34; title=&#34;**Crypto needs.**（No trusted storage）&#34;&gt;&lt;/a&gt;**Crypto needs.**（No trusted storage）&lt;/h3&gt;&lt;p&gt;大多数受信任的系统都使用密码学。 然而，该规范并未提及提供安全的熵源或单调递增的计数器。&lt;/p&gt;
&lt;h3 id=&#34;Lack-of-virtualization&#34;&gt;&lt;a href=&#34;#Lack-of-virtualization&#34; class=&#34;headerlink&#34; title=&#34;Lack of virtualization.&#34;&gt;&lt;/a&gt;&lt;strong&gt;Lack of virtualization.&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;当今移动设备中使用的大多数基于 ARM 的 SoC 都缺乏虚拟化支持。 在缺乏虚拟化硬件辅助的 ARM 平台上虚拟化商用操作系统（例如 Windows）非常困难。&lt;/p&gt;
&lt;h3 id=&#34;Lack-of-secure-clock-and-other-peripherals&#34;&gt;&lt;a href=&#34;#Lack-of-secure-clock-and-other-peripherals&#34; class=&#34;headerlink&#34; title=&#34;Lack of secure clock (and other peripherals).&#34;&gt;&lt;/a&gt;&lt;strong&gt;Lack of secure clock (and other peripherals).&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;系统通常需要一个安全时钟。 虽然 TrustZone&lt;br&gt;访问受保护的内存和中断是向提供安全外设迈出的一步，但如果不保护可以与这些外设通信的总线控制器，通常是不够的。&lt;/p&gt;
&lt;h3 id=&#34;Lack-of-access&#34;&gt;&lt;a href=&#34;#Lack-of-access&#34; class=&#34;headerlink&#34; title=&#34;Lack of access&#34;&gt;&lt;/a&gt;&lt;strong&gt;Lack of access&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;大多数 SoC 硬件供应商不提供对其固件的访问。 因此，许多开发人员和研究人员无法找到将他们的系统或原型部署到 TrustZone 的方法。&lt;/p&gt;
</content>
        <updated>2021-08-27T07:40:49.262Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/08/20/TZ%E5%AD%A6%E4%B9%A0%E7%BB%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%932021.8.9-2021.8.20/</id>
        <title>TZ学习组学习总结2021.8.9-2021.8.20</title>
        <link rel="alternate" href="http://example.com/2021/08/20/TZ%E5%AD%A6%E4%B9%A0%E7%BB%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%932021.8.9-2021.8.20/"/>
        <content type="html">&lt;p&gt;姓名：胡晨&lt;/p&gt;
&lt;h2 id=&#34;一-本段时间的学习内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-本段时间的学习内容&#34;&gt;#&lt;/a&gt; 一、 本段时间的学习内容：&lt;/h2&gt;
&lt;h3 id=&#34;a-学习的详细内容1成功搭建optee环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a-学习的详细内容1成功搭建optee环境&#34;&gt;#&lt;/a&gt; A. 学习的详细内容 1：成功搭建 optee 环境。&lt;/h3&gt;
&lt;p&gt;学习成果 1：进度安排（各工作是否达到预期等）：达到。&lt;/p&gt;
&lt;h3 id=&#34;b学习的内容2实践taca的简单套路了解了执行的流程看了一些相关的视频httpswwwbilibilicomvideobv1l4411n7gzp1和博客httpsicyshuaiblogcsdnnetarticledetails73716352&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#b学习的内容2实践taca的简单套路了解了执行的流程看了一些相关的视频httpswwwbilibilicomvideobv1l4411n7gzp1和博客httpsicyshuaiblogcsdnnetarticledetails73716352&#34;&gt;#&lt;/a&gt; B. 学习的内容 2：实践 TA,CA 的简单套路，了解了执行的流程，看了一些相关的视频（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUw0NDExTjdnWj9wPTElRUYlQkMlODklRTUlOTIlOEMlRTUlOEQlOUElRTUlQUUlQTIlRUYlQkMlODhodHRwczovL2ljeXNodWFpLmJsb2cuY3Nkbi5uZXQvYXJ0aWNsZS9kZXRhaWxzLzczNzE2MzUyJUVGJUJDJTg5&#34;&gt;https://www.bilibili.com/video/BV1L4411N7gZ?p=1）和博客（https://icyshuai.blog.csdn.net/article/details/73716352）&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;学习成果 2：进度安排（各工作是否达到预期等）：达到。&lt;/p&gt;
&lt;h2 id=&#34;二-困难和解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-困难和解决方案&#34;&gt;#&lt;/a&gt; 二、困难和解决方案：&lt;/h2&gt;
&lt;p&gt;以下给出我总结的 optee 环境搭建方法（经过多次尝试，该方法可将时间缩短到两小时内，且必成功）：&lt;/p&gt;
&lt;p&gt;1. 首先，unbuntu 选择 18.04 版本，这是一切的基础，想必大家都知道版本的重要。（其他版本可能或多或少有难以解决的问题）。给出下载网址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuMTYzLmNvbS91YnVudHUtcmVsZWFzZXMvMTguMDQv&#34;&gt;http://mirrors.163.com/ubuntu-releases/18.04/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2. 使用如下指令安装搭建时需要的工具和库（此时使用 Ubuntu18.04 不会有任何报错，但是其他版本会有包安装不了，从而会导致后面一些莫名其妙的错误。）：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get install android-tools-adb android-tools-fastboot autoconf \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	automake bc bison build-essential cscope curl device-tree-compiler \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	expect flex ftp-upload gdisk iasl libattr1-dev libc6:i386 libcap-dev \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	libfdt-dev libftdi-dev libglib2.0-dev libhidapi-dev libncurses5-dev \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	libpixman-1-dev libssl-dev libstdc++6:i386 libtool libz1:i386 make \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mtools netcat python-crypto python-serial python-wand unzip uuid-dev \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	xdg-utils xterm xz-utils zlib1g-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3. 下载 OP-TEE 的源代码&lt;/p&gt;
&lt;p&gt;此时直接从网盘中下载就可以了，千万不要自己同步，可能出现 python 版本不对等问题网盘链接如下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMVQ5dHNPblEzRWJ6OXdtN2liekJMcHc=&#34;&gt;https://pan.baidu.com/s/1T9tsOnQ3Ebz9wm7ibzBLpw&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;提取码: cd94&lt;/p&gt;
&lt;p&gt;把压缩包复制到 ubuntu 中再解压就可以了（解压出来的文件层数过多，例如 /op-tee/OP-TEE/… , 可以只留一个大文件目录方便操作）&lt;/p&gt;
&lt;p&gt;5. 获取 toolchain&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ cd build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ make -f qemu.mk all&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6. 启动 qemu（仍然在 build 目录下）&lt;/p&gt;
&lt;p&gt;如果你不信邪，直接执行下面命令：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ make -f qemu.mk run-only&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时必然会出现一个问题：&lt;/p&gt;
&lt;p&gt;*** [/home/rhj0/open-tee/qemu/rules.mak:69：util/memfd.o] 错误 1&lt;/p&gt;
&lt;p&gt;此时就需要修改文件里的代码。（可以直接在文件里搜索关键代码，方便寻找）&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; qemu&amp;#x2F;util&amp;#x2F;memfd.c文件中的： &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#ifdef CONFIG_MEMFD &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;sys&amp;#x2F;memfd.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#elif defined CONFIG_LINUX &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 改为： #if defined CONFIG_LINUX &amp;amp;&amp;amp; !defined CONFIG_MEMFD &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; qemu&amp;#x2F;configure文件中的： &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;sys&amp;#x2F;memfd.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 改为： #include &amp;lt;sys&amp;#x2F;mman.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;附上官方的更改链接（更改和上面一样）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXQucWVtdS5vcmcvP3A9cWVtdS5naXQ7YT1jb21taXRkaWZmO2g9NzVlNWI3MGU2YjVkY2M0ZjIyMTk5OTJkN2NmZmE0NjJhYTQwNmFmMDtocD0yMDA3ODBhM2EzZWQwNjdkZmIyZTBkMjIxMGIwZWQwOWU3NDhiYTI2&#34;&gt;https://git.qemu.org/?p=qemu.git;a=commitdiff;h=75e5b70e6b5dcc4f2219992d7cffa462aa406af0;hp=200780a3a3ed067dfb2e0d2210b0ed09e748ba26&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;再次执行：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ make -f qemu.mk run-only&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就大功告成了。总耗时应该不超过两个小时，甚至网速快的话十几分钟就可以了。&lt;/p&gt;
&lt;p&gt;（以上全是踩坑踩出来的经验和各个评论区大佬的解决方案，本人只是汇总找了条最简单的路）&lt;/p&gt;
&lt;p&gt;对比别的教程把下载和同步源码改成了网盘下载，大大减少了不必要的麻烦。&lt;/p&gt;
&lt;p&gt;最后感谢：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUw0NDExTjdnWj9mcm9tPXNlYXJjaCZhbXA7c2VpZD0zMjU2MTgxNDQ5MjU3MjEzODExJUVGJUJDJTg4&#34;&gt;https://www.bilibili.com/video/BV1L4411N7gZ?from=search&amp;amp;seid=3256181449257213811（&lt;/span&gt;&lt;strong&gt;推荐观看&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;和 https://icyshuai.blog.csdn.net/article/details/71499619&lt;/p&gt;
&lt;p&gt;三、 下周预期安排&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下期进度安排：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尽快熟悉 TA 和 CA 的用法&lt;/p&gt;
</content>
        <updated>2021-08-20T10:43:25.579Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/11/c%E7%9A%84const/</id>
        <title>const</title>
        <link rel="alternate" href="http://example.com/2021/03/11/c%E7%9A%84const/"/>
        <content type="html">&lt;p&gt;const 修饰的数据类型是指常类型，常类型的变量或对象的对象的值是不能被更新的。&lt;/p&gt;
&lt;p&gt;const 推出的初始目的，正是为了取代预编译指令，消除他的缺点，同时继承它的优点。&lt;/p&gt;
&lt;h5 id=&#34;主要作用&#34;&gt;&lt;a href=&#34;#主要作用&#34; class=&#34;headerlink&#34; title=&#34;主要作用&#34;&gt;&lt;/a&gt;主要作用&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;可以定义const常量，具有不可变性。例如：const int max = 100；max++会产生错误。&lt;/li&gt;
&lt;li&gt;便于进行类型检查，是编译器对处理内容有更多了解，消除了一些隐患。例如：void f（const int i）{…….}编译器就会知道i是一个常量，不允许修改；&lt;/li&gt;
&lt;li&gt;可以避免意义模糊的数字出现，同样可以很方便的进行参数的调整和修改。同宏定义一样。&lt;/li&gt;
&lt;li&gt;可以保护被修饰的东西，防止意外的修改，增强程序的健壮性。&lt;/li&gt;
&lt;li&gt;可以节省空间，避免不必要的内存分配。如：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#define PI 3.14159 //常量宏  　　&lt;/p&gt;
&lt;p&gt;const double &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9QaQ==&#34;&gt;Pi&lt;/span&gt;=3.14159; //此时并未将Pi放入ROM中 ……  　　&lt;/p&gt;
&lt;p&gt;double i=Pi; //此时为Pi分配内存，以后不再分配！  　　&lt;/p&gt;
&lt;p&gt;double I=PI; //编译期间进行宏替换，分配内存　&lt;/p&gt;
&lt;p&gt;double j=Pi; //没有内存分配  　　&lt;/p&gt;
&lt;p&gt;double J=PI; //再进行宏替换，又一次分配内存！ &lt;/p&gt;
&lt;p&gt;const定义常量从汇编的角度来看，只是给出了对应的内存地址，而不是像#define一样给出的是立即数，所以，const定义的常量在程序运行过程中只有一份拷贝，而#define定义的常量在内存中有若干份拷贝。&lt;/p&gt;
&lt;h5 id=&#34;变量和常量&#34;&gt;&lt;a href=&#34;#变量和常量&#34; class=&#34;headerlink&#34; title=&#34;变量和常量&#34;&gt;&lt;/a&gt;变量和常量&lt;/h5&gt;&lt;p&gt;例：为什么下面的例子在使用一个const变量来初始化数组，ANSI C编译器会报告一个错误呢？&lt;/p&gt;
&lt;p&gt;const int n = 5；&lt;/p&gt;
&lt;p&gt;int a[n];&lt;/p&gt;
&lt;p&gt; 答案与分析：&lt;/p&gt;
&lt;p&gt;1）这个问题讨论的是“常量与“只读变量”的区别。常量，例如5， “abc”，等，肯定是只读的，因为常量是被编译器放在内存中的只读区域，当然也就不能够去修改它。而“只读变量”则是在内存中开辟一个地方来存放它的值，只不过这个值由编译器限定不允许被修改。C语言关键字const就是用来限定一个变量不允许被改变的修饰符（Qualifier）。上述代码中变量n被修饰为只读变量，可惜再怎么修饰也不是常量。而ANSI C规定数组定义时长度必须是“常量” C99标准，数组下标可以用变量来表示），“只读变量”也是不可以的，“常量”不等于“不可变的变量”。但是在C++中，局部数组是可以使用变量作为其长度的。&lt;/p&gt;
&lt;p&gt;2）但是在标准C++中，这样定义的是一个常量，这种写法是对的。实际上，根据编译过程及内存分配ANSI C对数组的规定限制了它（实际上用GCC或VS2005编译以上代码，确实没有错误产生，也没有给出警告）。&lt;/p&gt;
&lt;p&gt;3）那么，在ANSI C中用什么来定义常量呢？答案是enum类型和#define宏，这两个都可以用来定义常量。&lt;/p&gt;
&lt;p&gt;。。。。。&lt;/p&gt;
&lt;p&gt;const 的用法还有很多，今天就先写到这里。&lt;/p&gt;
&lt;p&gt;有需要再添加吧。&lt;/p&gt;
</content>
        <updated>2021-03-11T04:43:15.593Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/07/%E7%BA%B5%E5%90%91%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/</id>
        <title>纵向联邦学习</title>
        <link rel="alternate" href="http://example.com/2021/03/07/%E7%BA%B5%E5%90%91%E8%81%94%E9%82%A6%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h4 id=&#34;纵向联邦学习的定义与举例&#34;&gt;&lt;a href=&#34;#纵向联邦学习的定义与举例&#34; class=&#34;headerlink&#34; title=&#34;纵向联邦学习的定义与举例&#34;&gt;&lt;/a&gt;纵向联邦学习的定义与举例&lt;/h4&gt;&lt;p&gt;我们把在数据集上具有相同的样本空间、不同的特征空间的参与方所组成的联邦学习归类为纵向联邦学习（VFL）。&lt;/p&gt;
&lt;p&gt;假如有一位用户在一家银行中有一些能够反映出该用户的经济收入、消费习惯和信用评级的数据记录。同时在一家电商平台中记录着这位用户所浏览和购买的商品的历史信息。尽管这两家公司拥有用户数据的特征空间完全不同，他们彼此间却有着紧密的联系。例如，用户的购买历史可能在某种程度上决定了该用户的信用评级。&lt;/p&gt;
&lt;p&gt;出于不同的商业目的，不同的组织拥有的数据通常具有不同的特征空间，但这些组织可能共享一个巨大的用户群体。通过使用VFL，我们可以利用分布于这些组织的异构数据，搭建更好的机器学习模型，并且不需要交换和泄露隐私数据。&lt;/p&gt;
&lt;h4 id=&#34;纵向联邦学习的架构&#34;&gt;&lt;a href=&#34;#纵向联邦学习的架构&#34; class=&#34;headerlink&#34; title=&#34;纵向联邦学习的架构&#34;&gt;&lt;/a&gt;纵向联邦学习的架构&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y9OHB.png&#34; alt=&#34;image-20210309235515471&#34;&gt;&lt;/p&gt;
&lt;p&gt;举个例子。假设两家公司A和B想要协同地训练一个机器学习模型。每一家公司拥有各自的数据，此外B还拥有进行模型预测任务所需的标注数据。由于用户隐私和数据安全的原因，A方和B 方不能直接交换数据。为了保证训练过程中的数据保密性，加入了一个第三方协调者C。在这里，我们假设C方是诚实且不与A方和B方共谋，但A方和B方都是诚实但好奇的。被信任的第三方是一个合理的假设，因为C方的角色可以有权威机构（如政府）扮演或安全计算节点代替。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分：加密实体对齐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于A方和B方公司的用户群体不同，系统使用一种基于加密的用户ID对齐技术，来确保A方和B方不需要暴露各自的原始数据便可以对齐共同用户。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二部分：加密模型训练&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在确定共有实体后，各方可以使用这些共有实体的数据来协同地训练一个机器学习模型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协调者C创建密钥对，并将公共密钥发送给A方和B方。&lt;/li&gt;
&lt;li&gt;A方和B方对中间结果进行加密和交换。中间结果用来帮助计算梯度和损失值。&lt;/li&gt;
&lt;li&gt;A方和B方计算加密梯度并分别加入附加掩码。B方还会计算加密损失。A方和B方将加密的结果发送给C方。&lt;/li&gt;
&lt;li&gt;C方对梯度和损失信息进行解密，并将结果发送回A方和B方。A方和B方解除梯度信息上的掩码，并根据这些梯度信息来更新模型参数&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2021-03-07T08:06:41.564Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/07/c%E7%9A%84%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</id>
        <title>C的动态内存分配</title>
        <link rel="alternate" href="http://example.com/2021/03/07/c%E7%9A%84%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
        <content type="html">&lt;h4 id=&#34;内存分配的方式&#34;&gt;&lt;a href=&#34;#内存分配的方式&#34; class=&#34;headerlink&#34; title=&#34;内存分配的方式&#34;&gt;&lt;/a&gt;内存分配的方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在静态存储区域中进行分配&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​        内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，static变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在栈中进行分配&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​        在执行函数时，函数内&lt;strong&gt;局部变量&lt;/strong&gt;的存储单元都可以在栈上创建，函数执行结束时，这些存储但愿自动被释放。效率很高，但是分配的内存容量比较有限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在堆中进行分配&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​        在堆上分配也称为动态内存分配：程序在运行的时候用malloc等函数申请任意多少的内存，程序员自己负责在何时用free释放内存。动态内存分配的生存期由我们自己决定，使用非常灵活，但是问题相对也比较多；注意：如果没有释放的话，很容易就会造成内存溢出，因为堆中的内存块是全局的，因此不会因为函数的调用而结束&lt;/p&gt;
&lt;h4 id=&#34;动态内存分配中使用的函数：&#34;&gt;&lt;a href=&#34;#动态内存分配中使用的函数：&#34; class=&#34;headerlink&#34; title=&#34;动态内存分配中使用的函数：&#34;&gt;&lt;/a&gt;&lt;strong&gt;动态内存分配中使用的函数：&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1:malloc函数:需要用到的头文件malloc.h&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;void *malloc(size_t size) //————–&amp;gt;返回的是一个通用类型的指针，根据需要去进行强转；&lt;br&gt;功能：允许从空闲内存池中分配连续内存但不初始化&lt;br&gt;参数：size参数实际就是一个所需字节数的整数 malloc(20);&lt;br&gt;返回：若分配成功则返回一个指向该内存块的指针，在使用时可根据需要做强制类型转换，否则返回NULL（空指针）//需要判空&lt;/p&gt;
&lt;p&gt;free(p);//释放内存空间,将内存释放出来给系统；&lt;br&gt;free函数与malloc函数是成对出现的；&lt;br&gt;申请malloc的时候尽量去给它进行一下初始化，防止后面出现一些不确定性的东西；&lt;br&gt;malloc的生命周期：只要没有调用free这个函数，进程没有结束，那么此时，这个函数的生命周期就会一直存在在内存中；它是存放在堆空间中的，它不会因为你去函数调用的结束自动去释放，堆当中的内存是全局的。&lt;br&gt;如：int &lt;em&gt;p = (int&lt;/em&gt; )malloc(n&lt;em&gt;sizeof(int)); //在&lt;strong&gt;空闲内存池&lt;/strong&gt;中分配连续内存n&lt;/em&gt;sizeof(int)个字节的&lt;strong&gt;堆内存空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;malloc的相关实例代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;meta-string&#34;&gt;&amp;lt;malloc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *p,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,*(p+i));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;---------------\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;please input one number:&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//申请&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *p = (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(n * &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//内存申请成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        out(p,n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            *(p+i)=i*i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        out(p,n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//释放掉堆内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//内存申请失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;malloc is NULL!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2:calloc函数:需要用到的头文件stdlib.h&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;void &lt;em&gt;colloc(size_t num_elements,size_t element_size);&lt;br&gt;功能:功能同malloc是一样的，但是作*&lt;em&gt;初始化&lt;/em&gt;&lt;/em&gt;&lt;br&gt;参数:num_elements是所需的元素的数量，element_size是每个元素的字节数&lt;br&gt;返回:同malloc函数一样&lt;br&gt;也是需要与free(p)进行对称使用&lt;br&gt;calloc相关代码如下所示:&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;please input one number:&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;scanf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *p = (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;calloc&lt;/span&gt;(n,&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p!=&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt;n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;,*(p+i));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;calloc error\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;3: realloc函数:需要用到的头文件(stdlib.h),动态扩大缩小申请的内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;void *realloc(void *ptr,size_t new_size);&lt;br&gt;功能:在指针ptr指向的内存基础上扩大或者缩小内存&lt;br&gt;参数:ptr是指向先前通过&lt;strong&gt;malloc,calloc和realloc函数后分配的内存块的指针&lt;/strong&gt;，new_size是内存块的新尺寸，可能大于或者小于原有内存尺寸；这个是追加到new_size的新的内存&lt;br&gt;realloc在C语言中也被称为动态数组；&lt;br&gt;realloc函数使用的注意点:&lt;br&gt;1:当扩展内存的时候，不会对添加进内存块的字节进行初始化&lt;br&gt;2:若不能调整内存则返回NULL，但原有内存中的数据是不会发生改变的&lt;br&gt;3:&lt;strong&gt;若第一个参数为NULL那么功能 等同与malloc函数，若第二个参数为0,那么会释放调用内存块&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;realloc(NULL,10&lt;em&gt;size(int)) 等同malloc(10&lt;/em&gt;sizeof(int));&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;realloc(p,0); 等同于free&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4:当缩小或者扩大内存时，一般不会对其进行移动，若无法扩大内存块，那么realloc会在别处分配新的内存块，然后把旧内存块的数据复制到新块中，并将旧块删除释放内存。&lt;/p&gt;
&lt;p&gt;realloc相关的的代码为:&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;meta-string&#34;&gt;&amp;lt;malloc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *p ,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ;i &amp;lt; n; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;,*(p+i));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//申请4个字节的堆内存空间，未初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; * p = (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;*&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *p = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *(p+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)  =&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    out(p,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;===============\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//追加申请10个字节的内存空间，追加的空间也是未进行初始化的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     p = (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;realloc&lt;/span&gt;(p,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;*&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *(p+&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;) = &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *(p+&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) = &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *(p+&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) = &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *(p+&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;) = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    out(p,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//free之后，将指针置为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;4:free函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;free之后如果还有这块内存地址的话，此时这块内存归还给了系统，（可能这块内存还处于一个空闲状态）但是还是可以对其进行操作。里面的值短暂的会保留&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;free之后，申请内存的那个指针就会变成野指针(声明了，但是没有任何指向的指针)，有时候会出现野指针错误；&lt;br&gt;所以尽量在操作之后：将指针置为NULL&lt;br&gt;p=NULL；&lt;br&gt;注意：申请和释放是成对的，所以程序是不能进行多次free的，否则会崩溃的&lt;/p&gt;
&lt;h4 id=&#34;常见的内存错误：&#34;&gt;&lt;a href=&#34;#常见的内存错误：&#34; class=&#34;headerlink&#34; title=&#34;常见的内存错误：&#34;&gt;&lt;/a&gt;&lt;strong&gt;常见的内存错误：&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;错误&lt;br&gt;使用未分配成功的内存&lt;br&gt;避免方式：在使用内存之前检查指针是否为NULL；&lt;br&gt;引用分配成功但尚未初始化的内存&lt;br&gt;避免方式：赋予初值，即便是赋予零值也不可省略&lt;br&gt;内存分配成功并且已经初始化，但操作越过了内存的边界&lt;br&gt;避免：注意下表的使用不能超出边界&lt;br&gt;忘记释放内存，造成内存泄露&lt;br&gt;避免方式：申请内存的方式和释放内存的方式需要成双成对&lt;br&gt;释放内存之后却继续去使用这一块内存&lt;br&gt;避免方式：使用free内存之后，把指针置为NULL；&lt;/p&gt;
&lt;p&gt;内存错误的注意点：&lt;br&gt;指针消亡了，并不表示它所指向的内存会被自动释放,(在free之前，直接将指针设为NULL)；&lt;br&gt;内存释放了，并不代表指针会消亡或者成了NULL指针；(在free之后，指针并没有进行NULL设置)&lt;/p&gt;
&lt;p&gt;野指针：&lt;br&gt;野指针的形成是指针变量没有被初始化，任何指针变量刚被创建的时候不会自动成为NULL指针，它的缺省值是最忌的，它会乱指一气&lt;/p&gt;
&lt;p&gt;指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法内存&lt;/p&gt;
&lt;p&gt;free内存块之后，需要将指针设置为NULL，如果没有设置为NULL，也会出现“野指针”，它是指向“垃圾”内存的指针；&lt;/p&gt;
&lt;p&gt;多次free内存块，是会导致程序崩溃的。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5OTI0MDQxL2FydGljbGUvZGV0YWlscy81NDg5NzIwND9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2MTUwODM4MzkxNjc4MDI2NjI1MzAxMiUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC5wYyUyNTVGYWxsLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTYxNTA4MzgzOTE2NzgwMjY2MjUzMDEyJmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+Zmlyc3RfcmFua192Mn5ob3RfcmFuay00LTU0ODk3MjA0LnBjX3NlYXJjaF9yZXN1bHRfYmVmb3JlX2pzJmFtcDt1dG1fdGVybT1jJUU1JThBJUE4JUU2JTgwJTgxJUU1JTg2JTg1JUU1JUFEJTk4JUU1JTg4JTg2JUU5JTg1JThE&#34;&gt;https://blog.csdn.net/qq_29924041/article/details/54897204?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161508383916780266253012%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;amp;request_id=161508383916780266253012&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~hot_rank-4-54897204.pc_search_result_before_js&amp;amp;utm_term=c%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2021-03-07T02:13:23.228Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/06/3.6%E4%B8%BA%E4%BA%86%E8%82%9D%E5%91%A8%E6%8A%A5%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
        <title>横向联邦学习</title>
        <link rel="alternate" href="http://example.com/2021/03/06/3.6%E4%B8%BA%E4%BA%86%E8%82%9D%E5%91%A8%E6%8A%A5%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
        <content type="html">&lt;h4 id=&#34;定义：&#34;&gt;&lt;a href=&#34;#定义：&#34; class=&#34;headerlink&#34; title=&#34;定义：&#34;&gt;&lt;/a&gt;定义：&lt;/h4&gt;&lt;p&gt;横向联邦学习也称为按样本划分的联邦学习，可以应用于联邦学习的各个参与方的数据集有相同的特征空间和不同的样本空间的场景，类似于再表格视图中对数据进行水平划分的情况。&lt;/p&gt;
&lt;p&gt;举例来说，两个地区的城市商业银行可能在各自的区域拥有非常不同的客户群体，所以他们的客户交集非常小，他们的数据集有不同的样本id。然而，他们的业务非常相似，因此他们的数据集的特征空间是相同的。这两家可以联合起来进行横向联邦学习以构建更好的风控模型。&lt;/p&gt;
&lt;p&gt;关于横向联邦学习系统的安全性的定义，我们通常假设一个横向联邦学习系统的参与方都是诚实的，需要防范的对象是一个诚实但好奇的聚合服务器。即通常假设只有服务器才能使得数据参与方的隐私安全受到威胁。&lt;/p&gt;
&lt;p&gt;以下是一些已提出的学习方法：&lt;/p&gt;
&lt;p&gt;参与方独立地训练模型并只分享参数更新的子集，这是横向联邦学习的一种特殊形式。&lt;/p&gt;
&lt;p&gt;在联邦学习框架下对用户模型更新或者对梯度信息进行安全聚合。&lt;/p&gt;
&lt;p&gt;适用于模型参数聚合的加法同态加密，能够防御联邦学习系统里的中央服务器窃取模型信息或者数据隐私。&lt;/p&gt;
&lt;p&gt;还有一种叫做深度梯度压缩的压缩方法，能够大幅度降低在大规模分布式训练中需要的通信宽带。&lt;/p&gt;
&lt;p&gt;甚至，另一种考虑了恶意用户的安全模型也被提出，这带来了联邦学习新的安全挑战。当联邦学习训练结束时，聚合模型和整个模型的参数都会暴露给所有的参与方。&lt;/p&gt;
&lt;h4 id=&#34;横向联邦学习架构&#34;&gt;&lt;a href=&#34;#横向联邦学习架构&#34; class=&#34;headerlink&#34; title=&#34;横向联邦学习架构&#34;&gt;&lt;/a&gt;横向联邦学习架构&lt;/h4&gt;&lt;h5 id=&#34;客户-服务器构架&#34;&gt;&lt;a href=&#34;#客户-服务器构架&#34; class=&#34;headerlink&#34; title=&#34;客户-服务器构架&#34;&gt;&lt;/a&gt;客户-服务器构架&lt;/h5&gt;&lt;p&gt;由于资料的缺失，这一部分先不讨论。&lt;/p&gt;
&lt;h5 id=&#34;对等网络架构&#34;&gt;&lt;a href=&#34;#对等网络架构&#34; class=&#34;headerlink&#34; title=&#34;对等网络架构&#34;&gt;&lt;/a&gt;对等网络架构&lt;/h5&gt;&lt;p&gt;在该架构下，不存在中央服务器或者协调方。在这种架构中，横向联邦学习系统的K个参与方或者分布式训练方。每一个训练方负责只使用本地数据来训练同一个机器学习模型，此外，训练方们使用安全链路在相互之间传递模型参数信息。为了保证任意两方之间的通信安全，需要使用例如基于公共密钥的加密方法等安全措施。&lt;/p&gt;
&lt;p&gt;由于对等网络架构中不存在中央服务器，训练方必须提前商定发送和接受模型参数信息的顺序，主要有两个方法可以达到这个目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;循环传输&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;训练方被组织成一条链。第一个训练方将当前的模型参数发送给它的下一个训练方。该训练方接受来自上游的模型参数后，将使用来自本地数据集的小批量数据更新收到的模型参数。之后，它将更新后的模型参数传输给下一个训练方。这一过程将被持续重复，直到模型参数收敛或达到允许的组大训练时间。&lt;/p&gt;
&lt;p&gt;  2.随机传输&lt;/p&gt;
&lt;p&gt;第k个训练方选取i，并将模型参数发送给训练方i。当第i个训练方收到来自第i个训练方的模型参数后，它将使用来自本地数据集的数据的&lt;strong&gt;mini-batch&lt;/strong&gt;更新收到的模型参数。之后，第i个训练方选一个j，并将自己的模型参数发送给训练方j。这一过程将会重复，直到K个训练方同意模型参数收敛或达到允许的最大训练时间。这种方法叫做Gossip学习。&lt;/p&gt;
&lt;p&gt;与客户-服务器相比，对等网络架构的一个明显优点便是除去了中央服务器，而这类服务器在一些实际应用中可能难以获得或建立。但这一特性，也可能带来一些坏处，例如在循环传输模式中，由于没有中央服务器，权重参数并不分批量更新而是连续更新,这将导致训练模型耗费更多的时间。&lt;/p&gt;
</content>
        <updated>2021-03-06T05:47:32.026Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/05/3.4%E7%9A%84%E6%84%9F%E6%83%B3/</id>
        <title>怎么说呢，有点沉不下心来</title>
        <link rel="alternate" href="http://example.com/2021/03/05/3.4%E7%9A%84%E6%84%9F%E6%83%B3/"/>
        <content type="html">&lt;p&gt;又是无聊的一天，上午两节水课（大物老师太菜了，鬼都不想听）。哦，对，上午还看了一下Java，挺难的，看不太懂，毕竟没有咋实践过。继续看吧，看总比不看好。&lt;/p&gt;
&lt;p&gt;然后下午睡到三点多钟，爬起来学了一下博客做了点小功能，雪花呀，代码雨呀，有教程还是挺简单的，现在主要是在搞图标的问题，找也不好找，明天接着看一下吧。&lt;/p&gt;
&lt;p&gt;然后打了两把排位，都赢了（鳄鱼）。上单霸主。&lt;/p&gt;
&lt;p&gt;晚上写了一下博客，主要是工作室的任务还没完成，天天学这学那。所以写了点安全多方计算。算是理解深了点吧。&lt;/p&gt;
&lt;p&gt;over。&lt;/p&gt;
&lt;p&gt;明天体育课，，，操，，浪费老子100权重。&lt;/p&gt;
</content>
        <updated>2021-03-04T16:06:53.385Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/04/%E5%AE%89%E5%85%A8%E5%A4%9A%E6%96%B9%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%9D%E8%AE%A4%E8%AF%86/</id>
        <title>安全多方计算的初认识</title>
        <link rel="alternate" href="http://example.com/2021/03/04/%E5%AE%89%E5%85%A8%E5%A4%9A%E6%96%B9%E8%AE%A1%E7%AE%97%E7%9A%84%E5%88%9D%E8%AE%A4%E8%AF%86/"/>
        <content type="html">&lt;h5 id=&#34;安全多方计算&#34;&gt;&lt;a href=&#34;#安全多方计算&#34; class=&#34;headerlink&#34; title=&#34;安全多方计算&#34;&gt;&lt;/a&gt;安全多方计算&lt;/h5&gt;&lt;p&gt;安全多方计算最初是针对一个安全两方计算问题，即所谓的“百万富翁问题”而被提出的（姚期智）。在安全多方计算中，目的是协同地从没一方的隐私输入中计算函数的结果。而不用将这些输入展示给其他方。安全多方计算告诉我们，对于任何功能需求，我们都可以在不必显示除了输出以外的前提下计算它。&lt;/p&gt;
&lt;p&gt;为了了解安全多方计算，让我们先看两个场景例子: &lt;/p&gt;
&lt;p&gt;（1）Alice认为她的了某种遗传疾病，想验证自己的想法。正好她知道Bob有一个关于疾病的DNA模型的数据库。如果她把自己的DNA样品寄给Bob，那么Bob可以给出她的DNA的诊断结果。但是Alice又不想别人知道，这是她的隐私。所以，她请求Bob帮忙诊断自己DNA的方式是不可行的。因为这样Bob就知道了她的DNA及相关私人信息。&lt;/p&gt;
&lt;p&gt;（2）两个金融组织计划为了共同的利益决定互相合作一个项目。每个组织都想自己的需求获得满足。然而，他们的需求都是他们自己专有的数据，没人愿意透露给其他方，甚至是“信任”的第三方。那么他们如何在保护数据私密性的前提下合作项目呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;当前，解决上述问题的策略是假设有可信任的服务提供者或是假设存在可信任的第三方。但是在目前多变和充满恶意的环境中，这是极具风险的。因此，可以支持联合计算并保护参与者私密的协议变的日益重要。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y9BfS.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;证明安全多方学习计算协议是安全的标准方法为仿真范式。为了证明安全多方计算协议再仿真范式下可以抵御使t方腐败的敌手，需要构建一个模拟器，当给定t个勾结放的输入输出时，生成t个交互序列，从而使生成的交互序列与实际协议中生成的交互序列之间无法区分。&lt;/p&gt;
&lt;p&gt;通常情况下，安全多方计算能够通过三种不同的框架来实现：不经意传输、秘密共享和阈值同态加密。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从某种程度上讲，不经意传输协议和阈值同态加密方法都使用了秘密共享的思想，这可能就是为什么秘密共享被广泛认为是安全多方计算的核心。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.imgtg.com/2023/03/09/Y9UBN.png&#34; alt=&#34;image-20210304204437481&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;同态加密&#34;&gt;&lt;a href=&#34;#同态加密&#34; class=&#34;headerlink&#34; title=&#34;同态加密&#34;&gt;&lt;/a&gt;同态加密&lt;/h5&gt;&lt;p&gt;同态加密方法H是一种通过对相关密文进行有效的操作（不需获知解密密钥），从而允许在加密内容上进行特定代数运算的加密方法。&lt;/p&gt;
&lt;p&gt;…….&lt;/p&gt;
&lt;p&gt;这篇先不深入解释同态加密。&lt;/p&gt;
&lt;p&gt;over&lt;/p&gt;
&lt;p&gt;额，图片好像上传不上去（不会）。先就这样吧，反正图片也就是一些解释和公式。&lt;/p&gt;
</content>
        <updated>2021-03-04T10:05:43.931Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/03/3.3%E7%9A%84%E6%84%9F%E6%83%B3/</id>
        <title>无题</title>
        <link rel="alternate" href="http://example.com/2021/03/03/3.3%E7%9A%84%E6%84%9F%E6%83%B3/"/>
        <content type="html">&lt;h5 id=&#34;写这个只是为了回忆一下今天的所作所为，起到一个警醒作用吧！&#34;&gt;&lt;a href=&#34;#写这个只是为了回忆一下今天的所作所为，起到一个警醒作用吧！&#34; class=&#34;headerlink&#34; title=&#34;写这个只是为了回忆一下今天的所作所为，起到一个警醒作用吧！&#34;&gt;&lt;/a&gt;写这个只是为了回忆一下今天的所作所为，起到一个警醒作用吧！&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;今天就两节课，一节微积分，一节离散。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微积分还算好好听了，这个老师（高中喜）讲的课还算听得下去，感觉女的数学老师教学水平就那样，或者说不能激发我的兴趣把。还是得好好学，没办法，虽然感觉上了大学只想打游戏，但还是有自制力的。&lt;/p&gt;
&lt;p&gt;离散就真鸡巴水，难怪王静（大一上计算机导论的老师）都可以教。看了两节课java（沉默王二），也没看进去多少。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;晚上打了两三个小时游戏，输（我carry）多赢（队友carry）少。当然有点不尽兴，不过也没有办法。&lt;/li&gt;
&lt;li&gt;明天（星期四）似乎也是两节没啥意思的课（大物和思修）。突然想看python了，感觉挺容易的，java还得多学学，而且C都不怎么会。&lt;/li&gt;
&lt;li&gt;慢慢学吧。&lt;/li&gt;
&lt;li&gt;0：08&lt;/li&gt;
&lt;li&gt;over&lt;/li&gt;
&lt;/ul&gt;
</content>
        <updated>2021-03-03T15:46:09.789Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/03/static/</id>
        <title>C中static的运用</title>
        <link rel="alternate" href="http://example.com/2021/03/03/static/"/>
        <content type="html">&lt;h2 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;h5 id=&#34;1-局部变量&#34;&gt;&lt;a href=&#34;#1-局部变量&#34; class=&#34;headerlink&#34; title=&#34;1.局部变量&#34;&gt;&lt;/a&gt;1.局部变量&lt;/h5&gt;&lt;p&gt;定义在函数内部的变量（不加static修饰）属于这个范畴。编译器一般不对普通局部变量进行初始化，也就是说它的值在初始时是不确定的，除非对其显式赋值（啥意思？）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;普通局部变量存储于进程栈空间，使用完毕会立即释放。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;静态局部变量使用static修饰符定义，即使在声明时未赋初值，编译器也会把它初始化为0。且静态局部变量存储于进程的全局数据区，即使函数返回，它的值也会保持不变。&lt;/p&gt;
&lt;p&gt;小程序试一试（大一上期末考过类似的）&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;......自己臆想吧&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;n=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n++=&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; n=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n++=&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n++=&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; n=&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n++=&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由此可见，静态局部变量的效果跟全局变量有得一拼，而且位于函数体内部，就有利于程序的模块化了。&lt;/p&gt;
&lt;h5 id=&#34;2-全局变量&#34;&gt;&lt;a href=&#34;#2-全局变量&#34; class=&#34;headerlink&#34; title=&#34;2.全局变量&#34;&gt;&lt;/a&gt;2.全局变量&lt;/h5&gt;&lt;p&gt;全局变量定义在函数体外部，在全局数据区分配存储空间，且编译器会自动对其初始化。&lt;/p&gt;
&lt;p&gt;普通全局变量对整个工程可见，其他文件可以使用&lt;strong&gt;extern&lt;/strong&gt;外部声明后直接使用。也就是说其他文件不能再定义一个与其相同名字的变量了（否则编译器会认为它们是同一个变量）。&lt;/p&gt;
&lt;p&gt;静态全局变量仅对当前文件可见，其他文件不可访问，其他文件可以定义与其同名的变量，两者互不影响。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在定义不需要与其他文件共享的全局变量时，加上static关键字能够有效地降低程序模块之间的耦合，避免不同文件同名变量的冲突，且不会误使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;函数的使用方式与全局变量类似，在函数的返回类型前加上static，就是静态函数。其特性如下： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态函数只能在声明它的文件中可见，其他文件不能引用该函数&lt;/li&gt;
&lt;li&gt;不同的文件可以使用相同名字的静态函数，互不影响&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;非&lt;/strong&gt;&lt;/em&gt;静态函数可以在另一个文件中直接引用，甚至不必使用extern声明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非静态函数可以在另一个文件中直接引用，甚至不必使用extern声明： &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* file1.c */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello from fun.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fun();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fun1();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* file2.c */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fun1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello from static fun1.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用 &lt;code&gt;gcc file1.c file2.c&lt;/code&gt;编译时，错误报告如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/tmp/cc2VMzGR.o：在函数‘main’中： &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;static_fun.c:(.text+&lt;span class=&#34;number&#34;&gt;0x20&lt;/span&gt;)：对‘fun1’未定义的引用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;collect2: error: ld returned &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;exit&lt;/span&gt; status&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;修改文件，不使用static修饰符，可在另一文件中引用该函数：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* file1.c */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello from fun.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* file2.c */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fun();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同样使用 &lt;code&gt;gcc file1.c file2.c&lt;/code&gt;编译，编译通过，运行结果如下： &lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; % ./a.out &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hello from fun.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;总结：&#34;&gt;&lt;a href=&#34;#总结：&#34; class=&#34;headerlink&#34; title=&#34;总结：&#34;&gt;&lt;/a&gt;总结：&lt;/h2&gt;&lt;p&gt;写下来感觉static还是很有用的（虽然我没用过），能够将代码模块化，达到所谓的松耦合。&lt;/p&gt;
</content>
        <updated>2021-03-03T11:57:00.150Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
        <title>我的第一篇博客</title>
        <link rel="alternate" href="http://example.com/2021/03/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
        <content type="html">&lt;p&gt;&lt;em&gt;斜体文本&lt;/em&gt;&lt;br&gt;
&lt;em&gt;斜体文本&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;粗体文本&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;粗体文本&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;粗斜体文本&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;粗斜体文本&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;s&gt; BAIDU.COM&lt;/s&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一项：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;第一项嵌套的第一个元素&lt;/li&gt;
&lt;li&gt;第一项嵌套的第二个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;第三项&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最外层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一层嵌套&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二层嵌套&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</content>
        <updated>2021-03-03T05:02:28.386Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/03/02/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="http://example.com/2021/03/02/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2021-03-02T09:02:28.329Z</updated>
    </entry>
</feed>
